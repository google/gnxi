# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import rx_data_dist
from . import rx_data_wmm
from . import rx_mcs
from . import tx_data_dist
from . import tx_data_wmm
from . import tx_mcs
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-access-points - based on the path /access-points/access-point/ssids/ssid/bssids/bssid/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: BSS Counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__rx_bss_dot11_channel_utilization','__rx_mgmt','__rx_control','__rx_data_dist','__rx_data_wmm','__rx_mcs','__rx_retries','__rx_retries_data','__rx_retries_subframe','__rx_bytes_data','__tx_bss_dot11_channel_utilization','__tx_mgmt','__tx_control','__tx_data_dist','__tx_data_wmm','__tx_mcs','__tx_retries','__tx_retries_data','__tx_retries_subframe','__tx_bytes_data','__bss_channel_utilization',)

  _yang_name = 'counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__rx_bss_dot11_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="rx-bss-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)
    self.__rx_mgmt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-mgmt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_control = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_data_dist = YANGDynClass(base=rx_data_dist.rx_data_dist, is_container='container', yang_name="rx-data-dist", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    self.__rx_data_wmm = YANGDynClass(base=rx_data_wmm.rx_data_wmm, is_container='container', yang_name="rx-data-wmm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    self.__rx_mcs = YANGDynClass(base=rx_mcs.rx_mcs, is_container='container', yang_name="rx-mcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    self.__rx_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_retries_data = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_retries_subframe = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries-subframe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_bytes_data = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bytes-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__tx_bss_dot11_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="tx-bss-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)
    self.__tx_mgmt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-mgmt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__tx_control = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__tx_data_dist = YANGDynClass(base=tx_data_dist.tx_data_dist, is_container='container', yang_name="tx-data-dist", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    self.__tx_data_wmm = YANGDynClass(base=tx_data_wmm.tx_data_wmm, is_container='container', yang_name="tx-data-wmm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    self.__tx_mcs = YANGDynClass(base=tx_mcs.tx_mcs, is_container='container', yang_name="tx-mcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    self.__tx_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__tx_retries_data = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__tx_retries_subframe = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries-subframe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__tx_bytes_data = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bytes-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    self.__bss_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="bss-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['access-points', 'access-point', 'ssids', 'ssid', 'bssids', 'bssid', 'state', 'counters']

  def _get_rx_bss_dot11_channel_utilization(self):
    """
    Getter method for rx_bss_dot11_channel_utilization, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_bss_dot11_channel_utilization (oc-types:percentage)

    YANG Description: Recieve channel utilization percent caused by reception of
any 802.11 frame within this BSS.
    """
    return self.__rx_bss_dot11_channel_utilization
      
  def _set_rx_bss_dot11_channel_utilization(self, v, load=False):
    """
    Setter method for rx_bss_dot11_channel_utilization, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_bss_dot11_channel_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_bss_dot11_channel_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_bss_dot11_channel_utilization() directly.

    YANG Description: Recieve channel utilization percent caused by reception of
any 802.11 frame within this BSS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="rx-bss-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_bss_dot11_channel_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="rx-bss-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__rx_bss_dot11_channel_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_bss_dot11_channel_utilization(self):
    self.__rx_bss_dot11_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="rx-bss-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)


  def _get_rx_mgmt(self):
    """
    Getter method for rx_mgmt, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_mgmt (oc-yang:counter64)

    YANG Description: Received 802.11 Management frames.
    """
    return self.__rx_mgmt
      
  def _set_rx_mgmt(self, v, load=False):
    """
    Setter method for rx_mgmt, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_mgmt (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_mgmt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_mgmt() directly.

    YANG Description: Received 802.11 Management frames.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-mgmt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_mgmt must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-mgmt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_mgmt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_mgmt(self):
    self.__rx_mgmt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-mgmt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_control(self):
    """
    Getter method for rx_control, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_control (oc-yang:counter64)

    YANG Description: Received 802.11 Control frames.
    """
    return self.__rx_control
      
  def _set_rx_control(self, v, load=False):
    """
    Setter method for rx_control, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_control (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_control is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_control() directly.

    YANG Description: Received 802.11 Control frames.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_control must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_control = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_control(self):
    self.__rx_control = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_data_dist(self):
    """
    Getter method for rx_data_dist, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_data_dist (container)

    YANG Description: The distribution of Data frame sizes in bytes of
successfully recieved AMPDU, or MPDU for non-aggregated,
frames. The distribution should characterize frame sizes
starting at 64 bytes or less with the bin size doubling for
each successive bin to a maximum of 1MB or larger, as
represented in the following table:

Lower Bound Upper Bound
  0          64
  65         128
  129        256
  257        512
  513        1024
  1025       2048
  2049       4096
  4097       8192
  8193       16384
  16385      32768
  32769      65536
  65537      131072
  131073     262144
  262145     524288
  524289     1048576
    """
    return self.__rx_data_dist
      
  def _set_rx_data_dist(self, v, load=False):
    """
    Setter method for rx_data_dist, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_data_dist (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_data_dist is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_data_dist() directly.

    YANG Description: The distribution of Data frame sizes in bytes of
successfully recieved AMPDU, or MPDU for non-aggregated,
frames. The distribution should characterize frame sizes
starting at 64 bytes or less with the bin size doubling for
each successive bin to a maximum of 1MB or larger, as
represented in the following table:

Lower Bound Upper Bound
  0          64
  65         128
  129        256
  257        512
  513        1024
  1025       2048
  2049       4096
  4097       8192
  8193       16384
  16385      32768
  32769      65536
  65537      131072
  131073     262144
  262145     524288
  524289     1048576
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rx_data_dist.rx_data_dist, is_container='container', yang_name="rx-data-dist", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_data_dist must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rx_data_dist.rx_data_dist, is_container='container', yang_name="rx-data-dist", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)""",
        })

    self.__rx_data_dist = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_data_dist(self):
    self.__rx_data_dist = YANGDynClass(base=rx_data_dist.rx_data_dist, is_container='container', yang_name="rx-data-dist", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)


  def _get_rx_data_wmm(self):
    """
    Getter method for rx_data_wmm, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_data_wmm (container)

    YANG Description: Received 802.11 Data frames, per WMM Access Category.
    """
    return self.__rx_data_wmm
      
  def _set_rx_data_wmm(self, v, load=False):
    """
    Setter method for rx_data_wmm, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_data_wmm (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_data_wmm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_data_wmm() directly.

    YANG Description: Received 802.11 Data frames, per WMM Access Category.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rx_data_wmm.rx_data_wmm, is_container='container', yang_name="rx-data-wmm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_data_wmm must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rx_data_wmm.rx_data_wmm, is_container='container', yang_name="rx-data-wmm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)""",
        })

    self.__rx_data_wmm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_data_wmm(self):
    self.__rx_data_wmm = YANGDynClass(base=rx_data_wmm.rx_data_wmm, is_container='container', yang_name="rx-data-wmm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)


  def _get_rx_mcs(self):
    """
    Getter method for rx_mcs, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_mcs (container)

    YANG Description: Received Data frames, per MCS Index. It is expected that
vendors bucketize 802.11n MCS frames in their matching
802.11ac buckets.

Example, 802.11n MCS 15 = 802.11ac MCS 7.
802.11n MCS 20 = 802.11ac MCS 4.
    """
    return self.__rx_mcs
      
  def _set_rx_mcs(self, v, load=False):
    """
    Setter method for rx_mcs, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_mcs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_mcs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_mcs() directly.

    YANG Description: Received Data frames, per MCS Index. It is expected that
vendors bucketize 802.11n MCS frames in their matching
802.11ac buckets.

Example, 802.11n MCS 15 = 802.11ac MCS 7.
802.11n MCS 20 = 802.11ac MCS 4.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rx_mcs.rx_mcs, is_container='container', yang_name="rx-mcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_mcs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rx_mcs.rx_mcs, is_container='container', yang_name="rx-mcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)""",
        })

    self.__rx_mcs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_mcs(self):
    self.__rx_mcs = YANGDynClass(base=rx_mcs.rx_mcs, is_container='container', yang_name="rx-mcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)


  def _get_rx_retries(self):
    """
    Getter method for rx_retries, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_retries (oc-yang:counter64)

    YANG Description: Total number of received frames with the Retry bit set,
within this BSS.
    """
    return self.__rx_retries
      
  def _set_rx_retries(self, v, load=False):
    """
    Setter method for rx_retries, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_retries (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_retries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_retries() directly.

    YANG Description: Total number of received frames with the Retry bit set,
within this BSS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_retries must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_retries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_retries(self):
    self.__rx_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_retries_data(self):
    """
    Getter method for rx_retries_data, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_retries_data (oc-yang:counter64)

    YANG Description: Number of received QoS Data frames with the Retry bit set
    """
    return self.__rx_retries_data
      
  def _set_rx_retries_data(self, v, load=False):
    """
    Setter method for rx_retries_data, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_retries_data (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_retries_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_retries_data() directly.

    YANG Description: Number of received QoS Data frames with the Retry bit set
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_retries_data must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_retries_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_retries_data(self):
    self.__rx_retries_data = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_retries_subframe(self):
    """
    Getter method for rx_retries_subframe, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_retries_subframe (oc-yang:counter64)

    YANG Description: Aggregated MPDUs which had individual subframes that fail
and require retransmission.
    """
    return self.__rx_retries_subframe
      
  def _set_rx_retries_subframe(self, v, load=False):
    """
    Setter method for rx_retries_subframe, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_retries_subframe (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_retries_subframe is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_retries_subframe() directly.

    YANG Description: Aggregated MPDUs which had individual subframes that fail
and require retransmission.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries-subframe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_retries_subframe must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries-subframe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_retries_subframe = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_retries_subframe(self):
    self.__rx_retries_subframe = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-retries-subframe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_bytes_data(self):
    """
    Getter method for rx_bytes_data, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_bytes_data (oc-yang:counter64)

    YANG Description: Bytes received from QoS Data frames
    """
    return self.__rx_bytes_data
      
  def _set_rx_bytes_data(self, v, load=False):
    """
    Setter method for rx_bytes_data, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/rx_bytes_data (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_bytes_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_bytes_data() directly.

    YANG Description: Bytes received from QoS Data frames
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bytes-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_bytes_data must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bytes-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_bytes_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_bytes_data(self):
    self.__rx_bytes_data = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bytes-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_tx_bss_dot11_channel_utilization(self):
    """
    Getter method for tx_bss_dot11_channel_utilization, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_bss_dot11_channel_utilization (oc-types:percentage)

    YANG Description: Channel utilization percent caused by transmission of any
802.11 frame within this BSS.
    """
    return self.__tx_bss_dot11_channel_utilization
      
  def _set_tx_bss_dot11_channel_utilization(self, v, load=False):
    """
    Setter method for tx_bss_dot11_channel_utilization, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_bss_dot11_channel_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_bss_dot11_channel_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_bss_dot11_channel_utilization() directly.

    YANG Description: Channel utilization percent caused by transmission of any
802.11 frame within this BSS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="tx-bss-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_bss_dot11_channel_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="tx-bss-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__tx_bss_dot11_channel_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_bss_dot11_channel_utilization(self):
    self.__tx_bss_dot11_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="tx-bss-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)


  def _get_tx_mgmt(self):
    """
    Getter method for tx_mgmt, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_mgmt (oc-yang:counter64)

    YANG Description: Transmitted 802.11 Management frames.
    """
    return self.__tx_mgmt
      
  def _set_tx_mgmt(self, v, load=False):
    """
    Setter method for tx_mgmt, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_mgmt (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_mgmt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_mgmt() directly.

    YANG Description: Transmitted 802.11 Management frames.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-mgmt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_mgmt must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-mgmt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__tx_mgmt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_mgmt(self):
    self.__tx_mgmt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-mgmt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_tx_control(self):
    """
    Getter method for tx_control, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_control (oc-yang:counter64)

    YANG Description: Transmitted 802.11 Control frames.
    """
    return self.__tx_control
      
  def _set_tx_control(self, v, load=False):
    """
    Setter method for tx_control, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_control (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_control is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_control() directly.

    YANG Description: Transmitted 802.11 Control frames.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_control must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__tx_control = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_control(self):
    self.__tx_control = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_tx_data_dist(self):
    """
    Getter method for tx_data_dist, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_data_dist (container)

    YANG Description: The distribution of Data frame sizes in bytes of
successfully transmitted AMPDU, or MPDU for non-aggregated,
frames. The distribution should characterize frame sizes
starting at 64 bytes or less with the bin size doubling for
each successive bin to a maximum of 1MB or larger, as
represented in the following table:

Lower Bound Upper Bound
  0          64
  65         128
  129        256
  257        512
  513        1024
  1025       2048
  2049       4096
  4097       8192
  8193       16384
  16385      32768
  32769      65536
  65537      131072
  131073     262144
  262145     524288
  524289     1048576
    """
    return self.__tx_data_dist
      
  def _set_tx_data_dist(self, v, load=False):
    """
    Setter method for tx_data_dist, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_data_dist (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_data_dist is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_data_dist() directly.

    YANG Description: The distribution of Data frame sizes in bytes of
successfully transmitted AMPDU, or MPDU for non-aggregated,
frames. The distribution should characterize frame sizes
starting at 64 bytes or less with the bin size doubling for
each successive bin to a maximum of 1MB or larger, as
represented in the following table:

Lower Bound Upper Bound
  0          64
  65         128
  129        256
  257        512
  513        1024
  1025       2048
  2049       4096
  4097       8192
  8193       16384
  16385      32768
  32769      65536
  65537      131072
  131073     262144
  262145     524288
  524289     1048576
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=tx_data_dist.tx_data_dist, is_container='container', yang_name="tx-data-dist", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_data_dist must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=tx_data_dist.tx_data_dist, is_container='container', yang_name="tx-data-dist", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)""",
        })

    self.__tx_data_dist = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_data_dist(self):
    self.__tx_data_dist = YANGDynClass(base=tx_data_dist.tx_data_dist, is_container='container', yang_name="tx-data-dist", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)


  def _get_tx_data_wmm(self):
    """
    Getter method for tx_data_wmm, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_data_wmm (container)

    YANG Description: Transmitted QoS Data frames, per WMM AC.
    """
    return self.__tx_data_wmm
      
  def _set_tx_data_wmm(self, v, load=False):
    """
    Setter method for tx_data_wmm, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_data_wmm (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_data_wmm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_data_wmm() directly.

    YANG Description: Transmitted QoS Data frames, per WMM AC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=tx_data_wmm.tx_data_wmm, is_container='container', yang_name="tx-data-wmm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_data_wmm must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=tx_data_wmm.tx_data_wmm, is_container='container', yang_name="tx-data-wmm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)""",
        })

    self.__tx_data_wmm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_data_wmm(self):
    self.__tx_data_wmm = YANGDynClass(base=tx_data_wmm.tx_data_wmm, is_container='container', yang_name="tx-data-wmm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)


  def _get_tx_mcs(self):
    """
    Getter method for tx_mcs, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_mcs (container)

    YANG Description: Transmitted Data frames, per MCS Index. It is expected that
vendors bucketize 802.11n MCS frames in their matching
802.11ac buckets.

Example, 802.11n MCS 15 = 802.11ac MCS 7.
802.11n MCS 20 = 802.11ac MCS 4.
    """
    return self.__tx_mcs
      
  def _set_tx_mcs(self, v, load=False):
    """
    Setter method for tx_mcs, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_mcs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_mcs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_mcs() directly.

    YANG Description: Transmitted Data frames, per MCS Index. It is expected that
vendors bucketize 802.11n MCS frames in their matching
802.11ac buckets.

Example, 802.11n MCS 15 = 802.11ac MCS 7.
802.11n MCS 20 = 802.11ac MCS 4.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=tx_mcs.tx_mcs, is_container='container', yang_name="tx-mcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_mcs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=tx_mcs.tx_mcs, is_container='container', yang_name="tx-mcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)""",
        })

    self.__tx_mcs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_mcs(self):
    self.__tx_mcs = YANGDynClass(base=tx_mcs.tx_mcs, is_container='container', yang_name="tx-mcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='container', is_config=False)


  def _get_tx_retries(self):
    """
    Getter method for tx_retries, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_retries (oc-yang:counter64)

    YANG Description: Number of frames transmitted with the Retry bit set
    """
    return self.__tx_retries
      
  def _set_tx_retries(self, v, load=False):
    """
    Setter method for tx_retries, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_retries (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_retries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_retries() directly.

    YANG Description: Number of frames transmitted with the Retry bit set
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_retries must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__tx_retries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_retries(self):
    self.__tx_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_tx_retries_data(self):
    """
    Getter method for tx_retries_data, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_retries_data (oc-yang:counter64)

    YANG Description: Number of transmitted QoS Data frames with the Retry bit
set
    """
    return self.__tx_retries_data
      
  def _set_tx_retries_data(self, v, load=False):
    """
    Setter method for tx_retries_data, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_retries_data (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_retries_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_retries_data() directly.

    YANG Description: Number of transmitted QoS Data frames with the Retry bit
set
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_retries_data must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__tx_retries_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_retries_data(self):
    self.__tx_retries_data = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_tx_retries_subframe(self):
    """
    Getter method for tx_retries_subframe, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_retries_subframe (oc-yang:counter64)

    YANG Description: Aggregated MPDUs which had individual subframes that fail
and require retransmission.
    """
    return self.__tx_retries_subframe
      
  def _set_tx_retries_subframe(self, v, load=False):
    """
    Setter method for tx_retries_subframe, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_retries_subframe (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_retries_subframe is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_retries_subframe() directly.

    YANG Description: Aggregated MPDUs which had individual subframes that fail
and require retransmission.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries-subframe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_retries_subframe must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries-subframe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__tx_retries_subframe = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_retries_subframe(self):
    self.__tx_retries_subframe = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-retries-subframe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_tx_bytes_data(self):
    """
    Getter method for tx_bytes_data, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_bytes_data (oc-yang:counter64)

    YANG Description: Bytes transmitted from QoS Data frames
    """
    return self.__tx_bytes_data
      
  def _set_tx_bytes_data(self, v, load=False):
    """
    Setter method for tx_bytes_data, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/tx_bytes_data (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_bytes_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_bytes_data() directly.

    YANG Description: Bytes transmitted from QoS Data frames
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bytes-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_bytes_data must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bytes-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__tx_bytes_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_bytes_data(self):
    self.__tx_bytes_data = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bytes-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-yang:counter64', is_config=False)


  def _get_bss_channel_utilization(self):
    """
    Getter method for bss_channel_utilization, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/bss_channel_utilization (oc-types:percentage)

    YANG Description: Total 802.11 channel utilization in this BSS. The total
channel utilization should include all time periods the AP
spent actively receiving and transmitting 802.11 frames in
this BSS.
    """
    return self.__bss_channel_utilization
      
  def _set_bss_channel_utilization(self, v, load=False):
    """
    Setter method for bss_channel_utilization, mapped from YANG variable /access_points/access_point/ssids/ssid/bssids/bssid/state/counters/bss_channel_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bss_channel_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bss_channel_utilization() directly.

    YANG Description: Total 802.11 channel utilization in this BSS. The total
channel utilization should include all time periods the AP
spent actively receiving and transmitting 802.11 frames in
this BSS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="bss-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bss_channel_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="bss-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__bss_channel_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bss_channel_utilization(self):
    self.__bss_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="bss-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:percentage', is_config=False)

  rx_bss_dot11_channel_utilization = __builtin__.property(_get_rx_bss_dot11_channel_utilization)
  rx_mgmt = __builtin__.property(_get_rx_mgmt)
  rx_control = __builtin__.property(_get_rx_control)
  rx_data_dist = __builtin__.property(_get_rx_data_dist)
  rx_data_wmm = __builtin__.property(_get_rx_data_wmm)
  rx_mcs = __builtin__.property(_get_rx_mcs)
  rx_retries = __builtin__.property(_get_rx_retries)
  rx_retries_data = __builtin__.property(_get_rx_retries_data)
  rx_retries_subframe = __builtin__.property(_get_rx_retries_subframe)
  rx_bytes_data = __builtin__.property(_get_rx_bytes_data)
  tx_bss_dot11_channel_utilization = __builtin__.property(_get_tx_bss_dot11_channel_utilization)
  tx_mgmt = __builtin__.property(_get_tx_mgmt)
  tx_control = __builtin__.property(_get_tx_control)
  tx_data_dist = __builtin__.property(_get_tx_data_dist)
  tx_data_wmm = __builtin__.property(_get_tx_data_wmm)
  tx_mcs = __builtin__.property(_get_tx_mcs)
  tx_retries = __builtin__.property(_get_tx_retries)
  tx_retries_data = __builtin__.property(_get_tx_retries_data)
  tx_retries_subframe = __builtin__.property(_get_tx_retries_subframe)
  tx_bytes_data = __builtin__.property(_get_tx_bytes_data)
  bss_channel_utilization = __builtin__.property(_get_bss_channel_utilization)


  _pyangbind_elements = OrderedDict([('rx_bss_dot11_channel_utilization', rx_bss_dot11_channel_utilization), ('rx_mgmt', rx_mgmt), ('rx_control', rx_control), ('rx_data_dist', rx_data_dist), ('rx_data_wmm', rx_data_wmm), ('rx_mcs', rx_mcs), ('rx_retries', rx_retries), ('rx_retries_data', rx_retries_data), ('rx_retries_subframe', rx_retries_subframe), ('rx_bytes_data', rx_bytes_data), ('tx_bss_dot11_channel_utilization', tx_bss_dot11_channel_utilization), ('tx_mgmt', tx_mgmt), ('tx_control', tx_control), ('tx_data_dist', tx_data_dist), ('tx_data_wmm', tx_data_wmm), ('tx_mcs', tx_mcs), ('tx_retries', tx_retries), ('tx_retries_data', tx_retries_data), ('tx_retries_subframe', tx_retries_subframe), ('tx_bytes_data', tx_bytes_data), ('bss_channel_utilization', bss_channel_utilization), ])


