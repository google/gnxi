# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-access-points - based on the path /access-points/access-point/ssids/ssid/clients/client/client-connection/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Container for connection state related data, per client.
  """
  __slots__ = ('_path_helper', '_extmethods', '__client_state','__connection_time','__username','__hostname','__ipv4_address','__ipv6_addresses','__operating_system',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__client_state = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}},), is_leaf=True, yang_name="client-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='identityref', is_config=False)
    self.__connection_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:timeticks64', is_config=False)
    self.__username = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)
    self.__hostname = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="hostname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)
    self.__ipv4_address = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'})), is_leaf=False, yang_name="ipv4-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-inet:ipv4-address', is_config=False)
    self.__ipv6_addresses = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'})), is_leaf=False, yang_name="ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-inet:ipv6-address', is_config=False)
    self.__operating_system = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="operating-system", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['access-points', 'access-point', 'ssids', 'ssid', 'clients', 'client', 'client-connection', 'state']

  def _get_client_state(self):
    """
    Getter method for client_state, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/client_state (identityref)

    YANG Description: Various states a Client STA may be in.
    """
    return self.__client_state
      
  def _set_client_state(self, v, load=False):
    """
    Setter method for client_state, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/client_state (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_client_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_client_state() directly.

    YANG Description: Various states a Client STA may be in.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}},), is_leaf=True, yang_name="client-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """client_state must be of a type compatible with identityref""",
          'defined-type': "openconfig-access-points:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}},), is_leaf=True, yang_name="client-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='identityref', is_config=False)""",
        })

    self.__client_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_client_state(self):
    self.__client_state = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:ASSOCIATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L3AUTH_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:DHCP_REQD': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:AUTHENTICATED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_FAILURE_REJECT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L2AUTH_FAILURE_TIMEOUT': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:L3AUTH_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:DHCP_FAILURE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:POWERSAVE': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi-types:BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}, 'oc-wifi:BLACKLISTED': {'@module': 'openconfig-wifi-types', '@namespace': 'http://openconfig.net/yang/wifi/wifi-types'}},), is_leaf=True, yang_name="client-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='identityref', is_config=False)


  def _get_connection_time(self):
    """
    Getter method for connection_time, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/connection_time (oc-types:timeticks64)

    YANG Description: Reports the time of Client Association. The value is the
timestamp in nanoseconds relative to the Unix Epoch
(Jan 1, 1970 00:00:00 UTC).
    """
    return self.__connection_time
      
  def _set_connection_time(self, v, load=False):
    """
    Setter method for connection_time, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/connection_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connection_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connection_time() directly.

    YANG Description: Reports the time of Client Association. The value is the
timestamp in nanoseconds relative to the Unix Epoch
(Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connection_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__connection_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connection_time(self):
    self.__connection_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-types:timeticks64', is_config=False)


  def _get_username(self):
    """
    Getter method for username, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/username (string)

    YANG Description: Username of Client; can be outer-identity (if PEAP),
CN of certificate (if EAP-TLS) etc.
    """
    return self.__username
      
  def _set_username(self, v, load=False):
    """
    Setter method for username, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/username (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_username is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_username() directly.

    YANG Description: Username of Client; can be outer-identity (if PEAP),
CN of certificate (if EAP-TLS) etc.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """username must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)""",
        })

    self.__username = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_username(self):
    self.__username = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)


  def _get_hostname(self):
    """
    Getter method for hostname, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/hostname (string)

    YANG Description: Hostname of the client, as discovered via DHCP, mDNS
or otherwise.
    """
    return self.__hostname
      
  def _set_hostname(self, v, load=False):
    """
    Setter method for hostname, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/hostname (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hostname is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hostname() directly.

    YANG Description: Hostname of the client, as discovered via DHCP, mDNS
or otherwise.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="hostname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hostname must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="hostname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)""",
        })

    self.__hostname = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hostname(self):
    self.__hostname = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="hostname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)


  def _get_ipv4_address(self):
    """
    Getter method for ipv4_address, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/ipv4_address (oc-inet:ipv4-address)

    YANG Description: IPv4 addresses of the client.
    """
    return self.__ipv4_address
      
  def _set_ipv4_address(self, v, load=False):
    """
    Setter method for ipv4_address, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/ipv4_address (oc-inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4_address() directly.

    YANG Description: IPv4 addresses of the client.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'})), is_leaf=False, yang_name="ipv4-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4_address must be of a type compatible with oc-inet:ipv4-address""",
          'defined-type': "oc-inet:ipv4-address",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'})), is_leaf=False, yang_name="ipv4-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-inet:ipv4-address', is_config=False)""",
        })

    self.__ipv4_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4_address(self):
    self.__ipv4_address = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'})), is_leaf=False, yang_name="ipv4-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-inet:ipv4-address', is_config=False)


  def _get_ipv6_addresses(self):
    """
    Getter method for ipv6_addresses, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/ipv6_addresses (oc-inet:ipv6-address)

    YANG Description: IPv6 addresses of the client.
    """
    return self.__ipv6_addresses
      
  def _set_ipv6_addresses(self, v, load=False):
    """
    Setter method for ipv6_addresses, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/ipv6_addresses (oc-inet:ipv6-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6_addresses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6_addresses() directly.

    YANG Description: IPv6 addresses of the client.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'})), is_leaf=False, yang_name="ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-inet:ipv6-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6_addresses must be of a type compatible with oc-inet:ipv6-address""",
          'defined-type': "oc-inet:ipv6-address",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'})), is_leaf=False, yang_name="ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-inet:ipv6-address', is_config=False)""",
        })

    self.__ipv6_addresses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6_addresses(self):
    self.__ipv6_addresses = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'})), is_leaf=False, yang_name="ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='oc-inet:ipv6-address', is_config=False)


  def _get_operating_system(self):
    """
    Getter method for operating_system, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/operating_system (string)

    YANG Description: Optional/if known; the OS of the client.
    """
    return self.__operating_system
      
  def _set_operating_system(self, v, load=False):
    """
    Setter method for operating_system, mapped from YANG variable /access_points/access_point/ssids/ssid/clients/client/client_connection/state/operating_system (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operating_system is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operating_system() directly.

    YANG Description: Optional/if known; the OS of the client.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="operating-system", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operating_system must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="operating-system", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)""",
        })

    self.__operating_system = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operating_system(self):
    self.__operating_system = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="operating-system", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/access-points', defining_module='openconfig-access-points', yang_type='string', is_config=False)

  client_state = __builtin__.property(_get_client_state)
  connection_time = __builtin__.property(_get_connection_time)
  username = __builtin__.property(_get_username)
  hostname = __builtin__.property(_get_hostname)
  ipv4_address = __builtin__.property(_get_ipv4_address)
  ipv6_addresses = __builtin__.property(_get_ipv6_addresses)
  operating_system = __builtin__.property(_get_operating_system)


  _pyangbind_elements = OrderedDict([('client_state', client_state), ('connection_time', connection_time), ('username', username), ('hostname', hostname), ('ipv4_address', ipv4_address), ('ipv6_addresses', ipv6_addresses), ('operating_system', operating_system), ])


