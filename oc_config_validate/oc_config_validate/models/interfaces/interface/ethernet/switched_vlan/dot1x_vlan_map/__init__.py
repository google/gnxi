# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import vlan_name
class dot1x_vlan_map(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/ethernet/switched-vlan/dot1x-vlan-map. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for mapping a VLAN name to VLAN id
  """
  __slots__ = ('_path_helper', '_extmethods', '__vlan_name',)

  _yang_name = 'dot1x-vlan-map'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__vlan_name = YANGDynClass(base=YANGListType("vlan_name",vlan_name.vlan_name, yang_name="vlan-name", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-name', extensions=None), is_container='list', yang_name="vlan-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/8021x', defining_module='openconfig-if-8021x', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['interfaces', 'interface', 'ethernet', 'switched-vlan', 'dot1x-vlan-map']

  def _get_vlan_name(self):
    """
    Getter method for vlan_name, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/dot1x_vlan_map/vlan_name (list)

    YANG Description: A list of mappings from VLAN name to VLAN id.
Entries in this list are utilized for DVA using a VLAN
name; eg when RADIUS returns a VLAN name as the
tunnel-private-group-id.
    """
    return self.__vlan_name
      
  def _set_vlan_name(self, v, load=False):
    """
    Setter method for vlan_name, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/dot1x_vlan_map/vlan_name (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan_name() directly.

    YANG Description: A list of mappings from VLAN name to VLAN id.
Entries in this list are utilized for DVA using a VLAN
name; eg when RADIUS returns a VLAN name as the
tunnel-private-group-id.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vlan_name",vlan_name.vlan_name, yang_name="vlan-name", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-name', extensions=None), is_container='list', yang_name="vlan-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/8021x', defining_module='openconfig-if-8021x', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan_name must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vlan_name",vlan_name.vlan_name, yang_name="vlan-name", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-name', extensions=None), is_container='list', yang_name="vlan-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/8021x', defining_module='openconfig-if-8021x', yang_type='list', is_config=True)""",
        })

    self.__vlan_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan_name(self):
    self.__vlan_name = YANGDynClass(base=YANGListType("vlan_name",vlan_name.vlan_name, yang_name="vlan-name", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-name', extensions=None), is_container='list', yang_name="vlan-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/8021x', defining_module='openconfig-if-8021x', yang_type='list', is_config=True)

  vlan_name = __builtin__.property(_get_vlan_name, _set_vlan_name)


  _pyangbind_elements = OrderedDict([('vlan_name', vlan_name), ])


