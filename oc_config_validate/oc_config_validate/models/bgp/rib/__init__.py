# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import attr_sets
from . import communities
from . import ext_communities
from . import afi_safis
class rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp - based on the path /bgp/rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for BGP RIBs
  """
  __slots__ = ('_path_helper', '_extmethods', '__attr_sets','__communities','__ext_communities','__afi_safis',)

  _yang_name = 'rib'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib']

  def _get_attr_sets(self):
    """
    Getter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)

    YANG Description: Enclosing container for the list of path attribute sets
    """
    return self.__attr_sets
      
  def _set_attr_sets(self, v, load=False):
    """
    Setter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_sets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_sets() directly.

    YANG Description: Enclosing container for the list of path attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_sets must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__attr_sets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_sets(self):
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_communities(self):
    """
    Getter method for communities, mapped from YANG variable /bgp/rib/communities (container)

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    return self.__communities
      
  def _set_communities(self, v, load=False):
    """
    Setter method for communities, mapped from YANG variable /bgp/rib/communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_communities() directly.

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_communities(self):
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_ext_communities(self):
    """
    Getter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    return self.__ext_communities
      
  def _set_ext_communities(self, v, load=False):
    """
    Setter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_communities() directly.

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__ext_communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_communities(self):
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_afi_safis(self):
    """
    Getter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)

    YANG Description: Enclosing container for address family list
    """
    return self.__afi_safis
      
  def _set_afi_safis(self, v, load=False):
    """
    Setter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_afi_safis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_afi_safis() directly.

    YANG Description: Enclosing container for address family list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """afi_safis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__afi_safis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_afi_safis(self):
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  attr_sets = __builtin__.property(_get_attr_sets)
  communities = __builtin__.property(_get_communities)
  ext_communities = __builtin__.property(_get_ext_communities)
  afi_safis = __builtin__.property(_get_afi_safis)


  _pyangbind_elements = OrderedDict([('attr_sets', attr_sets), ('communities', communities), ('ext_communities', ext_communities), ('afi_safis', afi_safis), ])


from . import attr_sets
from . import communities
from . import ext_communities
from . import afi_safis
class rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common - based on the path /bgp/rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for BGP RIBs
  """
  __slots__ = ('_path_helper', '_extmethods', '__attr_sets','__communities','__ext_communities','__afi_safis',)

  _yang_name = 'rib'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib']

  def _get_attr_sets(self):
    """
    Getter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)

    YANG Description: Enclosing container for the list of path attribute sets
    """
    return self.__attr_sets
      
  def _set_attr_sets(self, v, load=False):
    """
    Setter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_sets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_sets() directly.

    YANG Description: Enclosing container for the list of path attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_sets must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__attr_sets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_sets(self):
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_communities(self):
    """
    Getter method for communities, mapped from YANG variable /bgp/rib/communities (container)

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    return self.__communities
      
  def _set_communities(self, v, load=False):
    """
    Setter method for communities, mapped from YANG variable /bgp/rib/communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_communities() directly.

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_communities(self):
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_ext_communities(self):
    """
    Getter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    return self.__ext_communities
      
  def _set_ext_communities(self, v, load=False):
    """
    Setter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_communities() directly.

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__ext_communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_communities(self):
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_afi_safis(self):
    """
    Getter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)

    YANG Description: Enclosing container for address family list
    """
    return self.__afi_safis
      
  def _set_afi_safis(self, v, load=False):
    """
    Setter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_afi_safis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_afi_safis() directly.

    YANG Description: Enclosing container for address family list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """afi_safis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__afi_safis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_afi_safis(self):
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  attr_sets = __builtin__.property(_get_attr_sets)
  communities = __builtin__.property(_get_communities)
  ext_communities = __builtin__.property(_get_ext_communities)
  afi_safis = __builtin__.property(_get_afi_safis)


  _pyangbind_elements = OrderedDict([('attr_sets', attr_sets), ('communities', communities), ('ext_communities', ext_communities), ('afi_safis', afi_safis), ])


from . import attr_sets
from . import communities
from . import ext_communities
from . import afi_safis
class rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-multiprotocol - based on the path /bgp/rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for BGP RIBs
  """
  __slots__ = ('_path_helper', '_extmethods', '__attr_sets','__communities','__ext_communities','__afi_safis',)

  _yang_name = 'rib'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib']

  def _get_attr_sets(self):
    """
    Getter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)

    YANG Description: Enclosing container for the list of path attribute sets
    """
    return self.__attr_sets
      
  def _set_attr_sets(self, v, load=False):
    """
    Setter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_sets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_sets() directly.

    YANG Description: Enclosing container for the list of path attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_sets must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__attr_sets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_sets(self):
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_communities(self):
    """
    Getter method for communities, mapped from YANG variable /bgp/rib/communities (container)

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    return self.__communities
      
  def _set_communities(self, v, load=False):
    """
    Setter method for communities, mapped from YANG variable /bgp/rib/communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_communities() directly.

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_communities(self):
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_ext_communities(self):
    """
    Getter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    return self.__ext_communities
      
  def _set_ext_communities(self, v, load=False):
    """
    Setter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_communities() directly.

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__ext_communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_communities(self):
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_afi_safis(self):
    """
    Getter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)

    YANG Description: Enclosing container for address family list
    """
    return self.__afi_safis
      
  def _set_afi_safis(self, v, load=False):
    """
    Setter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_afi_safis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_afi_safis() directly.

    YANG Description: Enclosing container for address family list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """afi_safis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__afi_safis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_afi_safis(self):
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  attr_sets = __builtin__.property(_get_attr_sets)
  communities = __builtin__.property(_get_communities)
  ext_communities = __builtin__.property(_get_ext_communities)
  afi_safis = __builtin__.property(_get_afi_safis)


  _pyangbind_elements = OrderedDict([('attr_sets', attr_sets), ('communities', communities), ('ext_communities', ext_communities), ('afi_safis', afi_safis), ])


from . import attr_sets
from . import communities
from . import ext_communities
from . import afi_safis
class rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-structure - based on the path /bgp/rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for BGP RIBs
  """
  __slots__ = ('_path_helper', '_extmethods', '__attr_sets','__communities','__ext_communities','__afi_safis',)

  _yang_name = 'rib'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib']

  def _get_attr_sets(self):
    """
    Getter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)

    YANG Description: Enclosing container for the list of path attribute sets
    """
    return self.__attr_sets
      
  def _set_attr_sets(self, v, load=False):
    """
    Setter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_sets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_sets() directly.

    YANG Description: Enclosing container for the list of path attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_sets must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__attr_sets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_sets(self):
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_communities(self):
    """
    Getter method for communities, mapped from YANG variable /bgp/rib/communities (container)

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    return self.__communities
      
  def _set_communities(self, v, load=False):
    """
    Setter method for communities, mapped from YANG variable /bgp/rib/communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_communities() directly.

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_communities(self):
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_ext_communities(self):
    """
    Getter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    return self.__ext_communities
      
  def _set_ext_communities(self, v, load=False):
    """
    Setter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_communities() directly.

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__ext_communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_communities(self):
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_afi_safis(self):
    """
    Getter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)

    YANG Description: Enclosing container for address family list
    """
    return self.__afi_safis
      
  def _set_afi_safis(self, v, load=False):
    """
    Setter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_afi_safis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_afi_safis() directly.

    YANG Description: Enclosing container for address family list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """afi_safis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__afi_safis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_afi_safis(self):
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  attr_sets = __builtin__.property(_get_attr_sets)
  communities = __builtin__.property(_get_communities)
  ext_communities = __builtin__.property(_get_ext_communities)
  afi_safis = __builtin__.property(_get_afi_safis)


  _pyangbind_elements = OrderedDict([('attr_sets', attr_sets), ('communities', communities), ('ext_communities', ext_communities), ('afi_safis', afi_safis), ])


from . import attr_sets
from . import communities
from . import ext_communities
from . import afi_safis
class rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-peer-group - based on the path /bgp/rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for BGP RIBs
  """
  __slots__ = ('_path_helper', '_extmethods', '__attr_sets','__communities','__ext_communities','__afi_safis',)

  _yang_name = 'rib'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib']

  def _get_attr_sets(self):
    """
    Getter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)

    YANG Description: Enclosing container for the list of path attribute sets
    """
    return self.__attr_sets
      
  def _set_attr_sets(self, v, load=False):
    """
    Setter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_sets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_sets() directly.

    YANG Description: Enclosing container for the list of path attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_sets must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__attr_sets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_sets(self):
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_communities(self):
    """
    Getter method for communities, mapped from YANG variable /bgp/rib/communities (container)

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    return self.__communities
      
  def _set_communities(self, v, load=False):
    """
    Setter method for communities, mapped from YANG variable /bgp/rib/communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_communities() directly.

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_communities(self):
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_ext_communities(self):
    """
    Getter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    return self.__ext_communities
      
  def _set_ext_communities(self, v, load=False):
    """
    Setter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_communities() directly.

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__ext_communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_communities(self):
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_afi_safis(self):
    """
    Getter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)

    YANG Description: Enclosing container for address family list
    """
    return self.__afi_safis
      
  def _set_afi_safis(self, v, load=False):
    """
    Setter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_afi_safis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_afi_safis() directly.

    YANG Description: Enclosing container for address family list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """afi_safis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__afi_safis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_afi_safis(self):
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  attr_sets = __builtin__.property(_get_attr_sets)
  communities = __builtin__.property(_get_communities)
  ext_communities = __builtin__.property(_get_ext_communities)
  afi_safis = __builtin__.property(_get_afi_safis)


  _pyangbind_elements = OrderedDict([('attr_sets', attr_sets), ('communities', communities), ('ext_communities', ext_communities), ('afi_safis', afi_safis), ])


from . import attr_sets
from . import communities
from . import ext_communities
from . import afi_safis
class rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-neighbor - based on the path /bgp/rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for BGP RIBs
  """
  __slots__ = ('_path_helper', '_extmethods', '__attr_sets','__communities','__ext_communities','__afi_safis',)

  _yang_name = 'rib'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib']

  def _get_attr_sets(self):
    """
    Getter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)

    YANG Description: Enclosing container for the list of path attribute sets
    """
    return self.__attr_sets
      
  def _set_attr_sets(self, v, load=False):
    """
    Setter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_sets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_sets() directly.

    YANG Description: Enclosing container for the list of path attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_sets must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__attr_sets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_sets(self):
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_communities(self):
    """
    Getter method for communities, mapped from YANG variable /bgp/rib/communities (container)

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    return self.__communities
      
  def _set_communities(self, v, load=False):
    """
    Setter method for communities, mapped from YANG variable /bgp/rib/communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_communities() directly.

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_communities(self):
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_ext_communities(self):
    """
    Getter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    return self.__ext_communities
      
  def _set_ext_communities(self, v, load=False):
    """
    Setter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_communities() directly.

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__ext_communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_communities(self):
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_afi_safis(self):
    """
    Getter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)

    YANG Description: Enclosing container for address family list
    """
    return self.__afi_safis
      
  def _set_afi_safis(self, v, load=False):
    """
    Setter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_afi_safis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_afi_safis() directly.

    YANG Description: Enclosing container for address family list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """afi_safis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__afi_safis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_afi_safis(self):
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  attr_sets = __builtin__.property(_get_attr_sets)
  communities = __builtin__.property(_get_communities)
  ext_communities = __builtin__.property(_get_ext_communities)
  afi_safis = __builtin__.property(_get_afi_safis)


  _pyangbind_elements = OrderedDict([('attr_sets', attr_sets), ('communities', communities), ('ext_communities', ext_communities), ('afi_safis', afi_safis), ])


from . import attr_sets
from . import communities
from . import ext_communities
from . import afi_safis
class rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-global - based on the path /bgp/rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for BGP RIBs
  """
  __slots__ = ('_path_helper', '_extmethods', '__attr_sets','__communities','__ext_communities','__afi_safis',)

  _yang_name = 'rib'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib']

  def _get_attr_sets(self):
    """
    Getter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)

    YANG Description: Enclosing container for the list of path attribute sets
    """
    return self.__attr_sets
      
  def _set_attr_sets(self, v, load=False):
    """
    Setter method for attr_sets, mapped from YANG variable /bgp/rib/attr_sets (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_sets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_sets() directly.

    YANG Description: Enclosing container for the list of path attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_sets must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__attr_sets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_sets(self):
    self.__attr_sets = YANGDynClass(base=attr_sets.attr_sets, is_container='container', yang_name="attr-sets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_communities(self):
    """
    Getter method for communities, mapped from YANG variable /bgp/rib/communities (container)

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    return self.__communities
      
  def _set_communities(self, v, load=False):
    """
    Setter method for communities, mapped from YANG variable /bgp/rib/communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_communities() directly.

    YANG Description: Enclosing container for the list of community attribute
sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_communities(self):
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_ext_communities(self):
    """
    Getter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    return self.__ext_communities
      
  def _set_ext_communities(self, v, load=False):
    """
    Setter method for ext_communities, mapped from YANG variable /bgp/rib/ext_communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_communities() directly.

    YANG Description: Enclosing container for the list of extended community
attribute sets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__ext_communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_communities(self):
    self.__ext_communities = YANGDynClass(base=ext_communities.ext_communities, is_container='container', yang_name="ext-communities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_afi_safis(self):
    """
    Getter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)

    YANG Description: Enclosing container for address family list
    """
    return self.__afi_safis
      
  def _set_afi_safis(self, v, load=False):
    """
    Setter method for afi_safis, mapped from YANG variable /bgp/rib/afi_safis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_afi_safis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_afi_safis() directly.

    YANG Description: Enclosing container for address family list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """afi_safis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__afi_safis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_afi_safis(self):
    self.__afi_safis = YANGDynClass(base=afi_safis.afi_safis, is_container='container', yang_name="afi-safis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  attr_sets = __builtin__.property(_get_attr_sets)
  communities = __builtin__.property(_get_communities)
  ext_communities = __builtin__.property(_get_ext_communities)
  afi_safis = __builtin__.property(_get_afi_safis)


  _pyangbind_elements = OrderedDict([('attr_sets', attr_sets), ('communities', communities), ('ext_communities', ext_communities), ('afi_safis', afi_safis), ])


