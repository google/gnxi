# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import state
from . import adj_rib_in_pre
from . import adj_rib_in_post
from . import adj_rib_out_pre
from . import adj_rib_out_post
class neighbor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of neighbors (peers) of the local BGP speaker
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__state','__adj_rib_in_pre','__adj_rib_in_post','__adj_rib_out_pre','__adj_rib_out_post',)

  _yang_name = 'neighbor'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)

    YANG Description: Reference to the list key
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_pre(self):
    """
    Getter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    return self.__adj_rib_in_pre
      
  def _set_adj_rib_in_pre(self, v, load=False):
    """
    Setter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_pre() directly.

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_pre(self):
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_post(self):
    """
    Getter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    return self.__adj_rib_in_post
      
  def _set_adj_rib_in_post(self, v, load=False):
    """
    Setter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_post() directly.

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_post(self):
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_pre(self):
    """
    Getter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    return self.__adj_rib_out_pre
      
  def _set_adj_rib_out_pre(self, v, load=False):
    """
    Setter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_pre() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_pre(self):
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_post(self):
    """
    Getter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    return self.__adj_rib_out_post
      
  def _set_adj_rib_out_post(self, v, load=False):
    """
    Setter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_post() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_post(self):
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  state = __builtin__.property(_get_state)
  adj_rib_in_pre = __builtin__.property(_get_adj_rib_in_pre)
  adj_rib_in_post = __builtin__.property(_get_adj_rib_in_post)
  adj_rib_out_pre = __builtin__.property(_get_adj_rib_out_pre)
  adj_rib_out_post = __builtin__.property(_get_adj_rib_out_post)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('state', state), ('adj_rib_in_pre', adj_rib_in_pre), ('adj_rib_in_post', adj_rib_in_post), ('adj_rib_out_pre', adj_rib_out_pre), ('adj_rib_out_post', adj_rib_out_post), ])


from . import state
from . import adj_rib_in_pre
from . import adj_rib_in_post
from . import adj_rib_out_pre
from . import adj_rib_out_post
class neighbor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of neighbors (peers) of the local BGP speaker
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__state','__adj_rib_in_pre','__adj_rib_in_post','__adj_rib_out_pre','__adj_rib_out_post',)

  _yang_name = 'neighbor'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)

    YANG Description: Reference to the list key
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_pre(self):
    """
    Getter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    return self.__adj_rib_in_pre
      
  def _set_adj_rib_in_pre(self, v, load=False):
    """
    Setter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_pre() directly.

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_pre(self):
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_post(self):
    """
    Getter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    return self.__adj_rib_in_post
      
  def _set_adj_rib_in_post(self, v, load=False):
    """
    Setter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_post() directly.

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_post(self):
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_pre(self):
    """
    Getter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    return self.__adj_rib_out_pre
      
  def _set_adj_rib_out_pre(self, v, load=False):
    """
    Setter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_pre() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_pre(self):
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_post(self):
    """
    Getter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    return self.__adj_rib_out_post
      
  def _set_adj_rib_out_post(self, v, load=False):
    """
    Setter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_post() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_post(self):
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  state = __builtin__.property(_get_state)
  adj_rib_in_pre = __builtin__.property(_get_adj_rib_in_pre)
  adj_rib_in_post = __builtin__.property(_get_adj_rib_in_post)
  adj_rib_out_pre = __builtin__.property(_get_adj_rib_out_pre)
  adj_rib_out_post = __builtin__.property(_get_adj_rib_out_post)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('state', state), ('adj_rib_in_pre', adj_rib_in_pre), ('adj_rib_in_post', adj_rib_in_post), ('adj_rib_out_pre', adj_rib_out_pre), ('adj_rib_out_post', adj_rib_out_post), ])


from . import state
from . import adj_rib_in_pre
from . import adj_rib_in_post
from . import adj_rib_out_pre
from . import adj_rib_out_post
class neighbor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-multiprotocol - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of neighbors (peers) of the local BGP speaker
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__state','__adj_rib_in_pre','__adj_rib_in_post','__adj_rib_out_pre','__adj_rib_out_post',)

  _yang_name = 'neighbor'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)

    YANG Description: Reference to the list key
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_pre(self):
    """
    Getter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    return self.__adj_rib_in_pre
      
  def _set_adj_rib_in_pre(self, v, load=False):
    """
    Setter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_pre() directly.

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_pre(self):
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_post(self):
    """
    Getter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    return self.__adj_rib_in_post
      
  def _set_adj_rib_in_post(self, v, load=False):
    """
    Setter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_post() directly.

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_post(self):
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_pre(self):
    """
    Getter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    return self.__adj_rib_out_pre
      
  def _set_adj_rib_out_pre(self, v, load=False):
    """
    Setter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_pre() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_pre(self):
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_post(self):
    """
    Getter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    return self.__adj_rib_out_post
      
  def _set_adj_rib_out_post(self, v, load=False):
    """
    Setter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_post() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_post(self):
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  state = __builtin__.property(_get_state)
  adj_rib_in_pre = __builtin__.property(_get_adj_rib_in_pre)
  adj_rib_in_post = __builtin__.property(_get_adj_rib_in_post)
  adj_rib_out_pre = __builtin__.property(_get_adj_rib_out_pre)
  adj_rib_out_post = __builtin__.property(_get_adj_rib_out_post)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('state', state), ('adj_rib_in_pre', adj_rib_in_pre), ('adj_rib_in_post', adj_rib_in_post), ('adj_rib_out_pre', adj_rib_out_pre), ('adj_rib_out_post', adj_rib_out_post), ])


from . import state
from . import adj_rib_in_pre
from . import adj_rib_in_post
from . import adj_rib_out_pre
from . import adj_rib_out_post
class neighbor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-structure - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of neighbors (peers) of the local BGP speaker
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__state','__adj_rib_in_pre','__adj_rib_in_post','__adj_rib_out_pre','__adj_rib_out_post',)

  _yang_name = 'neighbor'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)

    YANG Description: Reference to the list key
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_pre(self):
    """
    Getter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    return self.__adj_rib_in_pre
      
  def _set_adj_rib_in_pre(self, v, load=False):
    """
    Setter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_pre() directly.

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_pre(self):
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_post(self):
    """
    Getter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    return self.__adj_rib_in_post
      
  def _set_adj_rib_in_post(self, v, load=False):
    """
    Setter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_post() directly.

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_post(self):
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_pre(self):
    """
    Getter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    return self.__adj_rib_out_pre
      
  def _set_adj_rib_out_pre(self, v, load=False):
    """
    Setter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_pre() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_pre(self):
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_post(self):
    """
    Getter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    return self.__adj_rib_out_post
      
  def _set_adj_rib_out_post(self, v, load=False):
    """
    Setter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_post() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_post(self):
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  state = __builtin__.property(_get_state)
  adj_rib_in_pre = __builtin__.property(_get_adj_rib_in_pre)
  adj_rib_in_post = __builtin__.property(_get_adj_rib_in_post)
  adj_rib_out_pre = __builtin__.property(_get_adj_rib_out_pre)
  adj_rib_out_post = __builtin__.property(_get_adj_rib_out_post)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('state', state), ('adj_rib_in_pre', adj_rib_in_pre), ('adj_rib_in_post', adj_rib_in_post), ('adj_rib_out_pre', adj_rib_out_pre), ('adj_rib_out_post', adj_rib_out_post), ])


from . import state
from . import adj_rib_in_pre
from . import adj_rib_in_post
from . import adj_rib_out_pre
from . import adj_rib_out_post
class neighbor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-peer-group - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of neighbors (peers) of the local BGP speaker
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__state','__adj_rib_in_pre','__adj_rib_in_post','__adj_rib_out_pre','__adj_rib_out_post',)

  _yang_name = 'neighbor'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)

    YANG Description: Reference to the list key
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_pre(self):
    """
    Getter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    return self.__adj_rib_in_pre
      
  def _set_adj_rib_in_pre(self, v, load=False):
    """
    Setter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_pre() directly.

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_pre(self):
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_post(self):
    """
    Getter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    return self.__adj_rib_in_post
      
  def _set_adj_rib_in_post(self, v, load=False):
    """
    Setter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_post() directly.

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_post(self):
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_pre(self):
    """
    Getter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    return self.__adj_rib_out_pre
      
  def _set_adj_rib_out_pre(self, v, load=False):
    """
    Setter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_pre() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_pre(self):
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_post(self):
    """
    Getter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    return self.__adj_rib_out_post
      
  def _set_adj_rib_out_post(self, v, load=False):
    """
    Setter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_post() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_post(self):
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  state = __builtin__.property(_get_state)
  adj_rib_in_pre = __builtin__.property(_get_adj_rib_in_pre)
  adj_rib_in_post = __builtin__.property(_get_adj_rib_in_post)
  adj_rib_out_pre = __builtin__.property(_get_adj_rib_out_pre)
  adj_rib_out_post = __builtin__.property(_get_adj_rib_out_post)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('state', state), ('adj_rib_in_pre', adj_rib_in_pre), ('adj_rib_in_post', adj_rib_in_post), ('adj_rib_out_pre', adj_rib_out_pre), ('adj_rib_out_post', adj_rib_out_post), ])


from . import state
from . import adj_rib_in_pre
from . import adj_rib_in_post
from . import adj_rib_out_pre
from . import adj_rib_out_post
class neighbor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-neighbor - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of neighbors (peers) of the local BGP speaker
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__state','__adj_rib_in_pre','__adj_rib_in_post','__adj_rib_out_pre','__adj_rib_out_post',)

  _yang_name = 'neighbor'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)

    YANG Description: Reference to the list key
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_pre(self):
    """
    Getter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    return self.__adj_rib_in_pre
      
  def _set_adj_rib_in_pre(self, v, load=False):
    """
    Setter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_pre() directly.

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_pre(self):
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_post(self):
    """
    Getter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    return self.__adj_rib_in_post
      
  def _set_adj_rib_in_post(self, v, load=False):
    """
    Setter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_post() directly.

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_post(self):
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_pre(self):
    """
    Getter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    return self.__adj_rib_out_pre
      
  def _set_adj_rib_out_pre(self, v, load=False):
    """
    Setter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_pre() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_pre(self):
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_post(self):
    """
    Getter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    return self.__adj_rib_out_post
      
  def _set_adj_rib_out_post(self, v, load=False):
    """
    Setter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_post() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_post(self):
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  state = __builtin__.property(_get_state)
  adj_rib_in_pre = __builtin__.property(_get_adj_rib_in_pre)
  adj_rib_in_post = __builtin__.property(_get_adj_rib_in_post)
  adj_rib_out_pre = __builtin__.property(_get_adj_rib_out_pre)
  adj_rib_out_post = __builtin__.property(_get_adj_rib_out_post)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('state', state), ('adj_rib_in_pre', adj_rib_in_pre), ('adj_rib_in_post', adj_rib_in_post), ('adj_rib_out_pre', adj_rib_out_pre), ('adj_rib_out_post', adj_rib_out_post), ])


from . import state
from . import adj_rib_in_pre
from . import adj_rib_in_post
from . import adj_rib_out_pre
from . import adj_rib_out_post
class neighbor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-global - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of neighbors (peers) of the local BGP speaker
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__state','__adj_rib_in_pre','__adj_rib_in_post','__adj_rib_out_pre','__adj_rib_out_post',)

  _yang_name = 'neighbor'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)

    YANG Description: Reference to the list key
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/neighbor_address (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for each neighbor BGP Adj-RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_pre(self):
    """
    Getter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    return self.__adj_rib_in_pre
      
  def _set_adj_rib_in_pre(self, v, load=False):
    """
    Setter method for adj_rib_in_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_pre() directly.

    YANG Description: Per-neighbor table containing the NLRI updates
received from the neighbor before any local input
policy rules or filters have been applied.  This can
be considered the 'raw' updates from the neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_pre(self):
    self.__adj_rib_in_pre = YANGDynClass(base=adj_rib_in_pre.adj_rib_in_pre, is_container='container', yang_name="adj-rib-in-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_in_post(self):
    """
    Getter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    return self.__adj_rib_in_post
      
  def _set_adj_rib_in_post(self, v, load=False):
    """
    Setter method for adj_rib_in_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_in_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_in_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_in_post() directly.

    YANG Description: Per-neighbor table containing the paths received from
the neighbor that are eligible for best-path selection
after local input policy rules have been applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_in_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_in_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_in_post(self):
    self.__adj_rib_in_post = YANGDynClass(base=adj_rib_in_post.adj_rib_in_post, is_container='container', yang_name="adj-rib-in-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_pre(self):
    """
    Getter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    return self.__adj_rib_out_pre
      
  def _set_adj_rib_out_pre(self, v, load=False):
    """
    Setter method for adj_rib_out_pre, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_pre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_pre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_pre() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor before output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_pre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_pre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_pre(self):
    self.__adj_rib_out_pre = YANGDynClass(base=adj_rib_out_pre.adj_rib_out_pre, is_container='container', yang_name="adj-rib-out-pre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_adj_rib_out_post(self):
    """
    Getter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    return self.__adj_rib_out_post
      
  def _set_adj_rib_out_post(self, v, load=False):
    """
    Setter method for adj_rib_out_post, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_rib_out_post is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_rib_out_post() directly.

    YANG Description: Per-neighbor table containing paths eligble for
sending (advertising) to the neighbor after output
policy rules have been applied
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_rib_out_post must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__adj_rib_out_post = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_rib_out_post(self):
    self.__adj_rib_out_post = YANGDynClass(base=adj_rib_out_post.adj_rib_out_post, is_container='container', yang_name="adj-rib-out-post", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  state = __builtin__.property(_get_state)
  adj_rib_in_pre = __builtin__.property(_get_adj_rib_in_pre)
  adj_rib_in_post = __builtin__.property(_get_adj_rib_in_post)
  adj_rib_out_pre = __builtin__.property(_get_adj_rib_out_pre)
  adj_rib_out_post = __builtin__.property(_get_adj_rib_out_post)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('state', state), ('adj_rib_in_pre', adj_rib_in_pre), ('adj_rib_in_post', adj_rib_in_post), ('adj_rib_out_pre', adj_rib_out_pre), ('adj_rib_out_post', adj_rib_out_post), ])


