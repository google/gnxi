# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import state
from . import unknown_attributes
class route(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of routes in the table, keyed by a combination of
the route prefix and path-id to distinguish multiple
routes received from a neighbor for the same prefix,
e.g., when BGP add-paths is enabled.
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__state','__unknown_attributes',)

  _yang_name = 'route'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)

    YANG Description: Reference to the prefix list key
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Reference to the prefix list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)

    YANG Description: Reference to the path-id list key
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: Reference to the path-id list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('state', state), ('unknown_attributes', unknown_attributes), ])


from . import state
from . import unknown_attributes
class route(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of routes in the table, keyed by a combination of
the route prefix and path-id to distinguish multiple
routes received from a neighbor for the same prefix,
e.g., when BGP add-paths is enabled.
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__state','__unknown_attributes',)

  _yang_name = 'route'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)

    YANG Description: Reference to the prefix list key
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Reference to the prefix list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)

    YANG Description: Reference to the path-id list key
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: Reference to the path-id list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('state', state), ('unknown_attributes', unknown_attributes), ])


from . import state
from . import unknown_attributes
class route(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-multiprotocol - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of routes in the table, keyed by a combination of
the route prefix and path-id to distinguish multiple
routes received from a neighbor for the same prefix,
e.g., when BGP add-paths is enabled.
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__state','__unknown_attributes',)

  _yang_name = 'route'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)

    YANG Description: Reference to the prefix list key
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Reference to the prefix list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)

    YANG Description: Reference to the path-id list key
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: Reference to the path-id list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('state', state), ('unknown_attributes', unknown_attributes), ])


from . import state
from . import unknown_attributes
class route(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-structure - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of routes in the table, keyed by a combination of
the route prefix and path-id to distinguish multiple
routes received from a neighbor for the same prefix,
e.g., when BGP add-paths is enabled.
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__state','__unknown_attributes',)

  _yang_name = 'route'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)

    YANG Description: Reference to the prefix list key
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Reference to the prefix list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)

    YANG Description: Reference to the path-id list key
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: Reference to the path-id list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('state', state), ('unknown_attributes', unknown_attributes), ])


from . import state
from . import unknown_attributes
class route(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-peer-group - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of routes in the table, keyed by a combination of
the route prefix and path-id to distinguish multiple
routes received from a neighbor for the same prefix,
e.g., when BGP add-paths is enabled.
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__state','__unknown_attributes',)

  _yang_name = 'route'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)

    YANG Description: Reference to the prefix list key
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Reference to the prefix list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)

    YANG Description: Reference to the path-id list key
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: Reference to the path-id list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('state', state), ('unknown_attributes', unknown_attributes), ])


from . import state
from . import unknown_attributes
class route(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-neighbor - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of routes in the table, keyed by a combination of
the route prefix and path-id to distinguish multiple
routes received from a neighbor for the same prefix,
e.g., when BGP add-paths is enabled.
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__state','__unknown_attributes',)

  _yang_name = 'route'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)

    YANG Description: Reference to the prefix list key
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Reference to the prefix list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)

    YANG Description: Reference to the path-id list key
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: Reference to the path-id list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('state', state), ('unknown_attributes', unknown_attributes), ])


from . import state
from . import unknown_attributes
class route(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-global - based on the path /bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of routes in the table, keyed by a combination of
the route prefix and path-id to distinguish multiple
routes received from a neighbor for the same prefix,
e.g., when BGP add-paths is enabled.
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__state','__unknown_attributes',)

  _yang_name = 'route'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)

    YANG Description: Reference to the prefix list key
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/prefix (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Reference to the prefix list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)

    YANG Description: Reference to the path-id list key
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: Reference to the path-id list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for BGP Adj-RIB entries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv4_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('state', state), ('unknown_attributes', unknown_attributes), ])


