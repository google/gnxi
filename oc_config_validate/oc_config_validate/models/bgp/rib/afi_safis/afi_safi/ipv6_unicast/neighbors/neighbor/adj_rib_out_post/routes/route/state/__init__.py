# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp - based on the path /bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for BGP Adj-RIB entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv6-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)

    YANG Description: Prefix for the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Prefix for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv6-prefix""",
          'defined-type': "oc-inet:ipv6-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common - based on the path /bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for BGP Adj-RIB entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv6-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)

    YANG Description: Prefix for the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Prefix for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv6-prefix""",
          'defined-type': "oc-inet:ipv6-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-multiprotocol - based on the path /bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for BGP Adj-RIB entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv6-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)

    YANG Description: Prefix for the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Prefix for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv6-prefix""",
          'defined-type': "oc-inet:ipv6-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-structure - based on the path /bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for BGP Adj-RIB entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv6-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)

    YANG Description: Prefix for the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Prefix for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv6-prefix""",
          'defined-type': "oc-inet:ipv6-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-peer-group - based on the path /bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for BGP Adj-RIB entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv6-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)

    YANG Description: Prefix for the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Prefix for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv6-prefix""",
          'defined-type': "oc-inet:ipv6-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-neighbor - based on the path /bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for BGP Adj-RIB entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv6-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)

    YANG Description: Prefix for the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Prefix for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv6-prefix""",
          'defined-type': "oc-inet:ipv6-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-global - based on the path /bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for BGP Adj-RIB entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv6-unicast', 'neighbors', 'neighbor', 'adj-rib-out-post', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)

    YANG Description: Prefix for the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/prefix (oc-inet:ipv6-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: Prefix for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv6-prefix""",
          'defined-type': "oc-inet:ipv6-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-inet:ipv6-prefix', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: When the BGP speaker supports advertisement of multiple
paths for a prefix, the path identifier is used to
uniquely identify a route based on the combination of the
prefix and path id.  In the Adj-RIB-In, the path-id value is
the value received in the update message.   In the Loc-RIB,
if used, it should represent a locally generated path-id
value for the corresponding route.  In Adj-RIB-Out, it
should be the value sent to a neighbor when add-paths is
used, i.e., the capability has been negotiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /bgp/rib/afi_safis/afi_safi/ipv6_unicast/neighbors/neighbor/adj_rib_out_post/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ])


