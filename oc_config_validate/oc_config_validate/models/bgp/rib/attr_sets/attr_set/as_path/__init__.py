# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import as_segment
class as_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp - based on the path /bgp/rib/attr-sets/attr-set/as-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of AS path segments.

In the Adj-RIB-In or Adj-RIB-Out, this list should show
the received or sent AS_PATH, respectively.  For
example, if the local router is not 4-byte capable, this
value should consist of 2-octet ASNs or the AS_TRANS
(AS 23456) values received or sent in route updates.

In the Loc-RIB, this list should reflect the effective
AS path for the route, e.g., a 4-octet value if the
local router is 4-octet capable.
  """
  __slots__ = ('_path_helper', '_extmethods', '__as_segment',)

  _yang_name = 'as-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'as-path']

  def _get_as_segment(self):
    """
    Getter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)

    YANG Description: Unkeyed list of AS PATH segments
    """
    return self.__as_segment
      
  def _set_as_segment(self, v, load=False):
    """
    Setter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_segment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_segment() directly.

    YANG Description: Unkeyed list of AS PATH segments
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_segment must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)""",
        })

    self.__as_segment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_segment(self):
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

  as_segment = __builtin__.property(_get_as_segment)


  _pyangbind_elements = OrderedDict([('as_segment', as_segment), ])


from . import as_segment
class as_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common - based on the path /bgp/rib/attr-sets/attr-set/as-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of AS path segments.

In the Adj-RIB-In or Adj-RIB-Out, this list should show
the received or sent AS_PATH, respectively.  For
example, if the local router is not 4-byte capable, this
value should consist of 2-octet ASNs or the AS_TRANS
(AS 23456) values received or sent in route updates.

In the Loc-RIB, this list should reflect the effective
AS path for the route, e.g., a 4-octet value if the
local router is 4-octet capable.
  """
  __slots__ = ('_path_helper', '_extmethods', '__as_segment',)

  _yang_name = 'as-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'as-path']

  def _get_as_segment(self):
    """
    Getter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)

    YANG Description: Unkeyed list of AS PATH segments
    """
    return self.__as_segment
      
  def _set_as_segment(self, v, load=False):
    """
    Setter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_segment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_segment() directly.

    YANG Description: Unkeyed list of AS PATH segments
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_segment must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)""",
        })

    self.__as_segment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_segment(self):
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

  as_segment = __builtin__.property(_get_as_segment)


  _pyangbind_elements = OrderedDict([('as_segment', as_segment), ])


from . import as_segment
class as_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-multiprotocol - based on the path /bgp/rib/attr-sets/attr-set/as-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of AS path segments.

In the Adj-RIB-In or Adj-RIB-Out, this list should show
the received or sent AS_PATH, respectively.  For
example, if the local router is not 4-byte capable, this
value should consist of 2-octet ASNs or the AS_TRANS
(AS 23456) values received or sent in route updates.

In the Loc-RIB, this list should reflect the effective
AS path for the route, e.g., a 4-octet value if the
local router is 4-octet capable.
  """
  __slots__ = ('_path_helper', '_extmethods', '__as_segment',)

  _yang_name = 'as-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'as-path']

  def _get_as_segment(self):
    """
    Getter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)

    YANG Description: Unkeyed list of AS PATH segments
    """
    return self.__as_segment
      
  def _set_as_segment(self, v, load=False):
    """
    Setter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_segment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_segment() directly.

    YANG Description: Unkeyed list of AS PATH segments
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_segment must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)""",
        })

    self.__as_segment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_segment(self):
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

  as_segment = __builtin__.property(_get_as_segment)


  _pyangbind_elements = OrderedDict([('as_segment', as_segment), ])


from . import as_segment
class as_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-structure - based on the path /bgp/rib/attr-sets/attr-set/as-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of AS path segments.

In the Adj-RIB-In or Adj-RIB-Out, this list should show
the received or sent AS_PATH, respectively.  For
example, if the local router is not 4-byte capable, this
value should consist of 2-octet ASNs or the AS_TRANS
(AS 23456) values received or sent in route updates.

In the Loc-RIB, this list should reflect the effective
AS path for the route, e.g., a 4-octet value if the
local router is 4-octet capable.
  """
  __slots__ = ('_path_helper', '_extmethods', '__as_segment',)

  _yang_name = 'as-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'as-path']

  def _get_as_segment(self):
    """
    Getter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)

    YANG Description: Unkeyed list of AS PATH segments
    """
    return self.__as_segment
      
  def _set_as_segment(self, v, load=False):
    """
    Setter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_segment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_segment() directly.

    YANG Description: Unkeyed list of AS PATH segments
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_segment must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)""",
        })

    self.__as_segment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_segment(self):
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

  as_segment = __builtin__.property(_get_as_segment)


  _pyangbind_elements = OrderedDict([('as_segment', as_segment), ])


from . import as_segment
class as_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-peer-group - based on the path /bgp/rib/attr-sets/attr-set/as-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of AS path segments.

In the Adj-RIB-In or Adj-RIB-Out, this list should show
the received or sent AS_PATH, respectively.  For
example, if the local router is not 4-byte capable, this
value should consist of 2-octet ASNs or the AS_TRANS
(AS 23456) values received or sent in route updates.

In the Loc-RIB, this list should reflect the effective
AS path for the route, e.g., a 4-octet value if the
local router is 4-octet capable.
  """
  __slots__ = ('_path_helper', '_extmethods', '__as_segment',)

  _yang_name = 'as-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'as-path']

  def _get_as_segment(self):
    """
    Getter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)

    YANG Description: Unkeyed list of AS PATH segments
    """
    return self.__as_segment
      
  def _set_as_segment(self, v, load=False):
    """
    Setter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_segment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_segment() directly.

    YANG Description: Unkeyed list of AS PATH segments
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_segment must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)""",
        })

    self.__as_segment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_segment(self):
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

  as_segment = __builtin__.property(_get_as_segment)


  _pyangbind_elements = OrderedDict([('as_segment', as_segment), ])


from . import as_segment
class as_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-neighbor - based on the path /bgp/rib/attr-sets/attr-set/as-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of AS path segments.

In the Adj-RIB-In or Adj-RIB-Out, this list should show
the received or sent AS_PATH, respectively.  For
example, if the local router is not 4-byte capable, this
value should consist of 2-octet ASNs or the AS_TRANS
(AS 23456) values received or sent in route updates.

In the Loc-RIB, this list should reflect the effective
AS path for the route, e.g., a 4-octet value if the
local router is 4-octet capable.
  """
  __slots__ = ('_path_helper', '_extmethods', '__as_segment',)

  _yang_name = 'as-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'as-path']

  def _get_as_segment(self):
    """
    Getter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)

    YANG Description: Unkeyed list of AS PATH segments
    """
    return self.__as_segment
      
  def _set_as_segment(self, v, load=False):
    """
    Setter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_segment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_segment() directly.

    YANG Description: Unkeyed list of AS PATH segments
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_segment must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)""",
        })

    self.__as_segment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_segment(self):
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

  as_segment = __builtin__.property(_get_as_segment)


  _pyangbind_elements = OrderedDict([('as_segment', as_segment), ])


from . import as_segment
class as_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-global - based on the path /bgp/rib/attr-sets/attr-set/as-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of AS path segments.

In the Adj-RIB-In or Adj-RIB-Out, this list should show
the received or sent AS_PATH, respectively.  For
example, if the local router is not 4-byte capable, this
value should consist of 2-octet ASNs or the AS_TRANS
(AS 23456) values received or sent in route updates.

In the Loc-RIB, this list should reflect the effective
AS path for the route, e.g., a 4-octet value if the
local router is 4-octet capable.
  """
  __slots__ = ('_path_helper', '_extmethods', '__as_segment',)

  _yang_name = 'as-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'as-path']

  def _get_as_segment(self):
    """
    Getter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)

    YANG Description: Unkeyed list of AS PATH segments
    """
    return self.__as_segment
      
  def _set_as_segment(self, v, load=False):
    """
    Setter method for as_segment, mapped from YANG variable /bgp/rib/attr_sets/attr_set/as_path/as_segment (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_segment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_segment() directly.

    YANG Description: Unkeyed list of AS PATH segments
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_segment must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)""",
        })

    self.__as_segment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_segment(self):
    self.__as_segment = YANGDynClass(base=YANGListType(False,as_segment.as_segment, yang_name="as-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="as-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='list', is_config=False)

  as_segment = __builtin__.property(_get_as_segment)


  _pyangbind_elements = OrderedDict([('as_segment', as_segment), ])


