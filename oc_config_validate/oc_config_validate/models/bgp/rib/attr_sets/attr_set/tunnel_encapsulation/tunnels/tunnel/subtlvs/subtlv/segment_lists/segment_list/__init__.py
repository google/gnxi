# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import state
from . import segments
class segment_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of segment lists that are specified within the
tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instance_id','__state','__segments',)

  _yang_name = 'segment-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'segment-lists', 'segment-list']

  def _get_instance_id(self):
    """
    Getter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    return self.__instance_id
      
  def _set_instance_id(self, v, load=False):
    """
    Setter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_id() directly.

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__instance_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_id(self):
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segments(self):
    """
    Getter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    return self.__segments
      
  def _set_segments(self, v, load=False):
    """
    Setter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segments() directly.

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segments must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segments(self):
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  instance_id = __builtin__.property(_get_instance_id)
  state = __builtin__.property(_get_state)
  segments = __builtin__.property(_get_segments)


  _pyangbind_elements = OrderedDict([('instance_id', instance_id), ('state', state), ('segments', segments), ])


from . import state
from . import segments
class segment_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of segment lists that are specified within the
tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instance_id','__state','__segments',)

  _yang_name = 'segment-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'segment-lists', 'segment-list']

  def _get_instance_id(self):
    """
    Getter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    return self.__instance_id
      
  def _set_instance_id(self, v, load=False):
    """
    Setter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_id() directly.

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__instance_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_id(self):
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segments(self):
    """
    Getter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    return self.__segments
      
  def _set_segments(self, v, load=False):
    """
    Setter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segments() directly.

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segments must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segments(self):
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  instance_id = __builtin__.property(_get_instance_id)
  state = __builtin__.property(_get_state)
  segments = __builtin__.property(_get_segments)


  _pyangbind_elements = OrderedDict([('instance_id', instance_id), ('state', state), ('segments', segments), ])


from . import state
from . import segments
class segment_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-multiprotocol - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of segment lists that are specified within the
tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instance_id','__state','__segments',)

  _yang_name = 'segment-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'segment-lists', 'segment-list']

  def _get_instance_id(self):
    """
    Getter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    return self.__instance_id
      
  def _set_instance_id(self, v, load=False):
    """
    Setter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_id() directly.

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__instance_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_id(self):
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segments(self):
    """
    Getter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    return self.__segments
      
  def _set_segments(self, v, load=False):
    """
    Setter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segments() directly.

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segments must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segments(self):
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  instance_id = __builtin__.property(_get_instance_id)
  state = __builtin__.property(_get_state)
  segments = __builtin__.property(_get_segments)


  _pyangbind_elements = OrderedDict([('instance_id', instance_id), ('state', state), ('segments', segments), ])


from . import state
from . import segments
class segment_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-structure - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of segment lists that are specified within the
tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instance_id','__state','__segments',)

  _yang_name = 'segment-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'segment-lists', 'segment-list']

  def _get_instance_id(self):
    """
    Getter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    return self.__instance_id
      
  def _set_instance_id(self, v, load=False):
    """
    Setter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_id() directly.

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__instance_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_id(self):
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segments(self):
    """
    Getter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    return self.__segments
      
  def _set_segments(self, v, load=False):
    """
    Setter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segments() directly.

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segments must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segments(self):
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  instance_id = __builtin__.property(_get_instance_id)
  state = __builtin__.property(_get_state)
  segments = __builtin__.property(_get_segments)


  _pyangbind_elements = OrderedDict([('instance_id', instance_id), ('state', state), ('segments', segments), ])


from . import state
from . import segments
class segment_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-peer-group - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of segment lists that are specified within the
tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instance_id','__state','__segments',)

  _yang_name = 'segment-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'segment-lists', 'segment-list']

  def _get_instance_id(self):
    """
    Getter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    return self.__instance_id
      
  def _set_instance_id(self, v, load=False):
    """
    Setter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_id() directly.

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__instance_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_id(self):
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segments(self):
    """
    Getter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    return self.__segments
      
  def _set_segments(self, v, load=False):
    """
    Setter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segments() directly.

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segments must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segments(self):
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  instance_id = __builtin__.property(_get_instance_id)
  state = __builtin__.property(_get_state)
  segments = __builtin__.property(_get_segments)


  _pyangbind_elements = OrderedDict([('instance_id', instance_id), ('state', state), ('segments', segments), ])


from . import state
from . import segments
class segment_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-neighbor - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of segment lists that are specified within the
tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instance_id','__state','__segments',)

  _yang_name = 'segment-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'segment-lists', 'segment-list']

  def _get_instance_id(self):
    """
    Getter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    return self.__instance_id
      
  def _set_instance_id(self, v, load=False):
    """
    Setter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_id() directly.

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__instance_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_id(self):
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segments(self):
    """
    Getter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    return self.__segments
      
  def _set_segments(self, v, load=False):
    """
    Setter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segments() directly.

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segments must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segments(self):
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  instance_id = __builtin__.property(_get_instance_id)
  state = __builtin__.property(_get_state)
  segments = __builtin__.property(_get_segments)


  _pyangbind_elements = OrderedDict([('instance_id', instance_id), ('state', state), ('segments', segments), ])


from . import state
from . import segments
class segment_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-global - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of segment lists that are specified within the
tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instance_id','__state','__segments',)

  _yang_name = 'segment-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'segment-lists', 'segment-list']

  def _get_instance_id(self):
    """
    Getter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    return self.__instance_id
      
  def _set_instance_id(self, v, load=False):
    """
    Setter method for instance_id, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/instance_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_id() directly.

    YANG Description: Reference to the instance identifier of the Segment List
that is included within the tunnel encapsulation
attribute.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__instance_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_id(self):
    self.__instance_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the Segment List within the
Tunnel Encapsulation attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segments(self):
    """
    Getter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    return self.__segments
      
  def _set_segments(self, v, load=False):
    """
    Setter method for segments, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists/segment_list/segments (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segments() directly.

    YANG Description: Surrounding container for the list of segments within the
SR-TE segment list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segments must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segments(self):
    self.__segments = YANGDynClass(base=segments.segments, is_container='container', yang_name="segments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  instance_id = __builtin__.property(_get_instance_id)
  state = __builtin__.property(_get_state)
  segments = __builtin__.property(_get_segments)


  _pyangbind_elements = OrderedDict([('instance_id', instance_id), ('state', state), ('segments', segments), ])


