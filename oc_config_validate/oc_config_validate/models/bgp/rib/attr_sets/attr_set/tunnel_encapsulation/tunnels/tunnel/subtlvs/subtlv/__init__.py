# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import state
from . import remote_endpoints
from . import segment_lists
class subtlv(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of the subTLVs that are specified within the
TLV instance inside the tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__state','__remote_endpoints','__segment_lists',)

  _yang_name = 'subtlv'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_remote_endpoints(self):
    """
    Getter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    return self.__remote_endpoints
      
  def _set_remote_endpoints(self, v, load=False):
    """
    Setter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_endpoints is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_endpoints() directly.

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_endpoints must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__remote_endpoints = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_endpoints(self):
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  type = __builtin__.property(_get_type)
  state = __builtin__.property(_get_state)
  remote_endpoints = __builtin__.property(_get_remote_endpoints)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('type', type), ('state', state), ('remote_endpoints', remote_endpoints), ('segment_lists', segment_lists), ])


from . import state
from . import remote_endpoints
from . import segment_lists
class subtlv(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of the subTLVs that are specified within the
TLV instance inside the tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__state','__remote_endpoints','__segment_lists',)

  _yang_name = 'subtlv'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_remote_endpoints(self):
    """
    Getter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    return self.__remote_endpoints
      
  def _set_remote_endpoints(self, v, load=False):
    """
    Setter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_endpoints is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_endpoints() directly.

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_endpoints must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__remote_endpoints = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_endpoints(self):
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  type = __builtin__.property(_get_type)
  state = __builtin__.property(_get_state)
  remote_endpoints = __builtin__.property(_get_remote_endpoints)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('type', type), ('state', state), ('remote_endpoints', remote_endpoints), ('segment_lists', segment_lists), ])


from . import state
from . import remote_endpoints
from . import segment_lists
class subtlv(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-multiprotocol - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of the subTLVs that are specified within the
TLV instance inside the tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__state','__remote_endpoints','__segment_lists',)

  _yang_name = 'subtlv'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_remote_endpoints(self):
    """
    Getter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    return self.__remote_endpoints
      
  def _set_remote_endpoints(self, v, load=False):
    """
    Setter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_endpoints is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_endpoints() directly.

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_endpoints must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__remote_endpoints = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_endpoints(self):
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  type = __builtin__.property(_get_type)
  state = __builtin__.property(_get_state)
  remote_endpoints = __builtin__.property(_get_remote_endpoints)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('type', type), ('state', state), ('remote_endpoints', remote_endpoints), ('segment_lists', segment_lists), ])


from . import state
from . import remote_endpoints
from . import segment_lists
class subtlv(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-structure - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of the subTLVs that are specified within the
TLV instance inside the tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__state','__remote_endpoints','__segment_lists',)

  _yang_name = 'subtlv'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_remote_endpoints(self):
    """
    Getter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    return self.__remote_endpoints
      
  def _set_remote_endpoints(self, v, load=False):
    """
    Setter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_endpoints is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_endpoints() directly.

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_endpoints must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__remote_endpoints = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_endpoints(self):
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  type = __builtin__.property(_get_type)
  state = __builtin__.property(_get_state)
  remote_endpoints = __builtin__.property(_get_remote_endpoints)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('type', type), ('state', state), ('remote_endpoints', remote_endpoints), ('segment_lists', segment_lists), ])


from . import state
from . import remote_endpoints
from . import segment_lists
class subtlv(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-peer-group - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of the subTLVs that are specified within the
TLV instance inside the tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__state','__remote_endpoints','__segment_lists',)

  _yang_name = 'subtlv'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_remote_endpoints(self):
    """
    Getter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    return self.__remote_endpoints
      
  def _set_remote_endpoints(self, v, load=False):
    """
    Setter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_endpoints is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_endpoints() directly.

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_endpoints must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__remote_endpoints = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_endpoints(self):
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  type = __builtin__.property(_get_type)
  state = __builtin__.property(_get_state)
  remote_endpoints = __builtin__.property(_get_remote_endpoints)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('type', type), ('state', state), ('remote_endpoints', remote_endpoints), ('segment_lists', segment_lists), ])


from . import state
from . import remote_endpoints
from . import segment_lists
class subtlv(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-neighbor - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of the subTLVs that are specified within the
TLV instance inside the tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__state','__remote_endpoints','__segment_lists',)

  _yang_name = 'subtlv'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_remote_endpoints(self):
    """
    Getter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    return self.__remote_endpoints
      
  def _set_remote_endpoints(self, v, load=False):
    """
    Setter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_endpoints is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_endpoints() directly.

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_endpoints must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__remote_endpoints = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_endpoints(self):
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  type = __builtin__.property(_get_type)
  state = __builtin__.property(_get_state)
  remote_endpoints = __builtin__.property(_get_remote_endpoints)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('type', type), ('state', state), ('remote_endpoints', remote_endpoints), ('segment_lists', segment_lists), ])


from . import state
from . import remote_endpoints
from . import segment_lists
class subtlv(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-global - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of the subTLVs that are specified within the
TLV instance inside the tunnel encapsulation attribute.
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__state','__remote_endpoints','__segment_lists',)

  _yang_name = 'subtlv'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Reference to the sub-TLV type that is included within
the subTLV.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters of the subTLV of the tunnel attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_remote_endpoints(self):
    """
    Getter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    return self.__remote_endpoints
      
  def _set_remote_endpoints(self, v, load=False):
    """
    Setter method for remote_endpoints, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/remote_endpoints (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_endpoints is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_endpoints() directly.

    YANG Description: The remote endpoints associated with the tunnel
described by the attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_endpoints must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__remote_endpoints = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_endpoints(self):
    self.__remote_endpoints = YANGDynClass(base=remote_endpoints.remote_endpoints, is_container='container', yang_name="remote-endpoints", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: Surrounding container for the list of segment lists that are
associated with a SR-TE Policy tunnel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='container', is_config=False)

  type = __builtin__.property(_get_type)
  state = __builtin__.property(_get_state)
  remote_endpoints = __builtin__.property(_get_remote_endpoints)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('type', type), ('state', state), ('remote_endpoints', remote_endpoints), ('segment_lists', segment_lists), ])


