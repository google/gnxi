# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters of the subTLV of the tunnel attribute
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__colors','__preference','__binding_sid',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'state']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)


  def _get_colors(self):
    """
    Getter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    return self.__colors
      
  def _set_colors(self, v, load=False):
    """
    Setter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_colors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_colors() directly.

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """colors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__colors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_colors(self):
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_preference(self):
    """
    Getter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    return self.__preference
      
  def _set_preference(self, v, load=False):
    """
    Setter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preference() directly.

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preference(self):
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_binding_sid(self):
    """
    Getter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)

    YANG Description: Binding SID associated with the SR-TE policy
    """
    return self.__binding_sid
      
  def _set_binding_sid(self, v, load=False):
    """
    Setter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_binding_sid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_binding_sid() directly.

    YANG Description: Binding SID associated with the SR-TE policy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """binding_sid must be of a type compatible with oc-srt:sr-sid-type""",
          'defined-type': "oc-srt:sr-sid-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)""",
        })

    self.__binding_sid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_binding_sid(self):
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

  type = __builtin__.property(_get_type)
  colors = __builtin__.property(_get_colors)
  preference = __builtin__.property(_get_preference)
  binding_sid = __builtin__.property(_get_binding_sid)


  _pyangbind_elements = OrderedDict([('type', type), ('colors', colors), ('preference', preference), ('binding_sid', binding_sid), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters of the subTLV of the tunnel attribute
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__colors','__preference','__binding_sid',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'state']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)


  def _get_colors(self):
    """
    Getter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    return self.__colors
      
  def _set_colors(self, v, load=False):
    """
    Setter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_colors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_colors() directly.

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """colors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__colors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_colors(self):
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_preference(self):
    """
    Getter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    return self.__preference
      
  def _set_preference(self, v, load=False):
    """
    Setter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preference() directly.

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preference(self):
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_binding_sid(self):
    """
    Getter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)

    YANG Description: Binding SID associated with the SR-TE policy
    """
    return self.__binding_sid
      
  def _set_binding_sid(self, v, load=False):
    """
    Setter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_binding_sid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_binding_sid() directly.

    YANG Description: Binding SID associated with the SR-TE policy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """binding_sid must be of a type compatible with oc-srt:sr-sid-type""",
          'defined-type': "oc-srt:sr-sid-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)""",
        })

    self.__binding_sid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_binding_sid(self):
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

  type = __builtin__.property(_get_type)
  colors = __builtin__.property(_get_colors)
  preference = __builtin__.property(_get_preference)
  binding_sid = __builtin__.property(_get_binding_sid)


  _pyangbind_elements = OrderedDict([('type', type), ('colors', colors), ('preference', preference), ('binding_sid', binding_sid), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-multiprotocol - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters of the subTLV of the tunnel attribute
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__colors','__preference','__binding_sid',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'state']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)


  def _get_colors(self):
    """
    Getter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    return self.__colors
      
  def _set_colors(self, v, load=False):
    """
    Setter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_colors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_colors() directly.

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """colors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__colors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_colors(self):
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_preference(self):
    """
    Getter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    return self.__preference
      
  def _set_preference(self, v, load=False):
    """
    Setter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preference() directly.

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preference(self):
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_binding_sid(self):
    """
    Getter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)

    YANG Description: Binding SID associated with the SR-TE policy
    """
    return self.__binding_sid
      
  def _set_binding_sid(self, v, load=False):
    """
    Setter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_binding_sid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_binding_sid() directly.

    YANG Description: Binding SID associated with the SR-TE policy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """binding_sid must be of a type compatible with oc-srt:sr-sid-type""",
          'defined-type': "oc-srt:sr-sid-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)""",
        })

    self.__binding_sid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_binding_sid(self):
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

  type = __builtin__.property(_get_type)
  colors = __builtin__.property(_get_colors)
  preference = __builtin__.property(_get_preference)
  binding_sid = __builtin__.property(_get_binding_sid)


  _pyangbind_elements = OrderedDict([('type', type), ('colors', colors), ('preference', preference), ('binding_sid', binding_sid), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-structure - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters of the subTLV of the tunnel attribute
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__colors','__preference','__binding_sid',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'state']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)


  def _get_colors(self):
    """
    Getter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    return self.__colors
      
  def _set_colors(self, v, load=False):
    """
    Setter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_colors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_colors() directly.

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """colors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__colors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_colors(self):
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_preference(self):
    """
    Getter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    return self.__preference
      
  def _set_preference(self, v, load=False):
    """
    Setter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preference() directly.

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preference(self):
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_binding_sid(self):
    """
    Getter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)

    YANG Description: Binding SID associated with the SR-TE policy
    """
    return self.__binding_sid
      
  def _set_binding_sid(self, v, load=False):
    """
    Setter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_binding_sid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_binding_sid() directly.

    YANG Description: Binding SID associated with the SR-TE policy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """binding_sid must be of a type compatible with oc-srt:sr-sid-type""",
          'defined-type': "oc-srt:sr-sid-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)""",
        })

    self.__binding_sid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_binding_sid(self):
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

  type = __builtin__.property(_get_type)
  colors = __builtin__.property(_get_colors)
  preference = __builtin__.property(_get_preference)
  binding_sid = __builtin__.property(_get_binding_sid)


  _pyangbind_elements = OrderedDict([('type', type), ('colors', colors), ('preference', preference), ('binding_sid', binding_sid), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-peer-group - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters of the subTLV of the tunnel attribute
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__colors','__preference','__binding_sid',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'state']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)


  def _get_colors(self):
    """
    Getter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    return self.__colors
      
  def _set_colors(self, v, load=False):
    """
    Setter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_colors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_colors() directly.

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """colors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__colors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_colors(self):
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_preference(self):
    """
    Getter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    return self.__preference
      
  def _set_preference(self, v, load=False):
    """
    Setter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preference() directly.

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preference(self):
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_binding_sid(self):
    """
    Getter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)

    YANG Description: Binding SID associated with the SR-TE policy
    """
    return self.__binding_sid
      
  def _set_binding_sid(self, v, load=False):
    """
    Setter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_binding_sid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_binding_sid() directly.

    YANG Description: Binding SID associated with the SR-TE policy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """binding_sid must be of a type compatible with oc-srt:sr-sid-type""",
          'defined-type': "oc-srt:sr-sid-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)""",
        })

    self.__binding_sid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_binding_sid(self):
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

  type = __builtin__.property(_get_type)
  colors = __builtin__.property(_get_colors)
  preference = __builtin__.property(_get_preference)
  binding_sid = __builtin__.property(_get_binding_sid)


  _pyangbind_elements = OrderedDict([('type', type), ('colors', colors), ('preference', preference), ('binding_sid', binding_sid), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-neighbor - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters of the subTLV of the tunnel attribute
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__colors','__preference','__binding_sid',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'state']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)


  def _get_colors(self):
    """
    Getter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    return self.__colors
      
  def _set_colors(self, v, load=False):
    """
    Setter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_colors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_colors() directly.

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """colors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__colors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_colors(self):
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_preference(self):
    """
    Getter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    return self.__preference
      
  def _set_preference(self, v, load=False):
    """
    Setter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preference() directly.

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preference(self):
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_binding_sid(self):
    """
    Getter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)

    YANG Description: Binding SID associated with the SR-TE policy
    """
    return self.__binding_sid
      
  def _set_binding_sid(self, v, load=False):
    """
    Setter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_binding_sid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_binding_sid() directly.

    YANG Description: Binding SID associated with the SR-TE policy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """binding_sid must be of a type compatible with oc-srt:sr-sid-type""",
          'defined-type': "oc-srt:sr-sid-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)""",
        })

    self.__binding_sid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_binding_sid(self):
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

  type = __builtin__.property(_get_type)
  colors = __builtin__.property(_get_colors)
  preference = __builtin__.property(_get_preference)
  binding_sid = __builtin__.property(_get_binding_sid)


  _pyangbind_elements = OrderedDict([('type', type), ('colors', colors), ('preference', preference), ('binding_sid', binding_sid), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-global - based on the path /bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters of the subTLV of the tunnel attribute
  """
  __slots__ = ('_path_helper', '_extmethods', '__type','__colors','__preference','__binding_sid',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'rib', 'attr-sets', 'attr-set', 'tunnel-encapsulation', 'tunnels', 'tunnel', 'subtlvs', 'subtlv', 'state']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type of the sub-TLV within the tunnel encapsulation attribute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-bgp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_REMOTE_ENDPOINT': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:TUNNEL_COLOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_PREFERENCE': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_BINDING_SID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:SRTE_SEGMENT_LIST': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='identityref', is_config=False)


  def _get_colors(self):
    """
    Getter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    return self.__colors
      
  def _set_colors(self, v, load=False):
    """
    Setter method for colors, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/colors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_colors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_colors() directly.

    YANG Description: The colours associated with the tunnel encapsulation attribute,
as described by RFC5512.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """colors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__colors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_colors(self):
    self.__colors = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="colors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_preference(self):
    """
    Getter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    return self.__preference
      
  def _set_preference(self, v, load=False):
    """
    Setter method for preference, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preference() directly.

    YANG Description: The preference of the SR-TE policy described by the tunnel
encapsulation attribute. If unspecified, the preference
defaults to 100.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preference(self):
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_binding_sid(self):
    """
    Getter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)

    YANG Description: Binding SID associated with the SR-TE policy
    """
    return self.__binding_sid
      
  def _set_binding_sid(self, v, load=False):
    """
    Setter method for binding_sid, mapped from YANG variable /bgp/rib/attr_sets/attr_set/tunnel_encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding_sid (oc-srt:sr-sid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_binding_sid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_binding_sid() directly.

    YANG Description: Binding SID associated with the SR-TE policy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """binding_sid must be of a type compatible with oc-srt:sr-sid-type""",
          'defined-type': "oc-srt:sr-sid-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)""",
        })

    self.__binding_sid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_binding_sid(self):
    self.__binding_sid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="binding-sid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='oc-srt:sr-sid-type', is_config=False)

  type = __builtin__.property(_get_type)
  colors = __builtin__.property(_get_colors)
  preference = __builtin__.property(_get_preference)
  binding_sid = __builtin__.property(_get_binding_sid)


  _pyangbind_elements = OrderedDict([('type', type), ('colors', colors), ('preference', preference), ('binding_sid', binding_sid), ])


