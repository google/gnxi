# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class prefixes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp - based on the path /bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Prefix counters for the BGP session
  """
  __slots__ = ('_path_helper', '_extmethods', '__received','__received_pre_policy','__sent','__installed',)

  _yang_name = 'prefixes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'neighbors', 'neighbor', 'afi-safis', 'afi-safi', 'state', 'prefixes']

  def _get_received(self):
    """
    Getter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    return self.__received
      
  def _set_received(self, v, load=False):
    """
    Setter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received() directly.

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received(self):
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_received_pre_policy(self):
    """
    Getter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    return self.__received_pre_policy
      
  def _set_received_pre_policy(self, v, load=False):
    """
    Setter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_pre_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_pre_policy() directly.

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_pre_policy must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received_pre_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_pre_policy(self):
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_sent(self):
    """
    Getter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    return self.__sent
      
  def _set_sent(self, v, load=False):
    """
    Setter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sent() directly.

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sent(self):
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_installed(self):
    """
    Getter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    return self.__installed
      
  def _set_installed(self, v, load=False):
    """
    Setter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_installed() directly.

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_installed(self):
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

  received = __builtin__.property(_get_received)
  received_pre_policy = __builtin__.property(_get_received_pre_policy)
  sent = __builtin__.property(_get_sent)
  installed = __builtin__.property(_get_installed)


  _pyangbind_elements = OrderedDict([('received', received), ('received_pre_policy', received_pre_policy), ('sent', sent), ('installed', installed), ])


class prefixes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common - based on the path /bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Prefix counters for the BGP session
  """
  __slots__ = ('_path_helper', '_extmethods', '__received','__received_pre_policy','__sent','__installed',)

  _yang_name = 'prefixes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'neighbors', 'neighbor', 'afi-safis', 'afi-safi', 'state', 'prefixes']

  def _get_received(self):
    """
    Getter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    return self.__received
      
  def _set_received(self, v, load=False):
    """
    Setter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received() directly.

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received(self):
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_received_pre_policy(self):
    """
    Getter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    return self.__received_pre_policy
      
  def _set_received_pre_policy(self, v, load=False):
    """
    Setter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_pre_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_pre_policy() directly.

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_pre_policy must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received_pre_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_pre_policy(self):
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_sent(self):
    """
    Getter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    return self.__sent
      
  def _set_sent(self, v, load=False):
    """
    Setter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sent() directly.

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sent(self):
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_installed(self):
    """
    Getter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    return self.__installed
      
  def _set_installed(self, v, load=False):
    """
    Setter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_installed() directly.

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_installed(self):
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

  received = __builtin__.property(_get_received)
  received_pre_policy = __builtin__.property(_get_received_pre_policy)
  sent = __builtin__.property(_get_sent)
  installed = __builtin__.property(_get_installed)


  _pyangbind_elements = OrderedDict([('received', received), ('received_pre_policy', received_pre_policy), ('sent', sent), ('installed', installed), ])


class prefixes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-multiprotocol - based on the path /bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Prefix counters for the BGP session
  """
  __slots__ = ('_path_helper', '_extmethods', '__received','__received_pre_policy','__sent','__installed',)

  _yang_name = 'prefixes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'neighbors', 'neighbor', 'afi-safis', 'afi-safi', 'state', 'prefixes']

  def _get_received(self):
    """
    Getter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    return self.__received
      
  def _set_received(self, v, load=False):
    """
    Setter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received() directly.

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received(self):
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_received_pre_policy(self):
    """
    Getter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    return self.__received_pre_policy
      
  def _set_received_pre_policy(self, v, load=False):
    """
    Setter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_pre_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_pre_policy() directly.

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_pre_policy must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received_pre_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_pre_policy(self):
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_sent(self):
    """
    Getter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    return self.__sent
      
  def _set_sent(self, v, load=False):
    """
    Setter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sent() directly.

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sent(self):
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_installed(self):
    """
    Getter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    return self.__installed
      
  def _set_installed(self, v, load=False):
    """
    Setter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_installed() directly.

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_installed(self):
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

  received = __builtin__.property(_get_received)
  received_pre_policy = __builtin__.property(_get_received_pre_policy)
  sent = __builtin__.property(_get_sent)
  installed = __builtin__.property(_get_installed)


  _pyangbind_elements = OrderedDict([('received', received), ('received_pre_policy', received_pre_policy), ('sent', sent), ('installed', installed), ])


class prefixes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-common-structure - based on the path /bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Prefix counters for the BGP session
  """
  __slots__ = ('_path_helper', '_extmethods', '__received','__received_pre_policy','__sent','__installed',)

  _yang_name = 'prefixes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'neighbors', 'neighbor', 'afi-safis', 'afi-safi', 'state', 'prefixes']

  def _get_received(self):
    """
    Getter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    return self.__received
      
  def _set_received(self, v, load=False):
    """
    Setter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received() directly.

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received(self):
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_received_pre_policy(self):
    """
    Getter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    return self.__received_pre_policy
      
  def _set_received_pre_policy(self, v, load=False):
    """
    Setter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_pre_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_pre_policy() directly.

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_pre_policy must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received_pre_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_pre_policy(self):
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_sent(self):
    """
    Getter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    return self.__sent
      
  def _set_sent(self, v, load=False):
    """
    Setter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sent() directly.

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sent(self):
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_installed(self):
    """
    Getter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    return self.__installed
      
  def _set_installed(self, v, load=False):
    """
    Setter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_installed() directly.

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_installed(self):
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

  received = __builtin__.property(_get_received)
  received_pre_policy = __builtin__.property(_get_received_pre_policy)
  sent = __builtin__.property(_get_sent)
  installed = __builtin__.property(_get_installed)


  _pyangbind_elements = OrderedDict([('received', received), ('received_pre_policy', received_pre_policy), ('sent', sent), ('installed', installed), ])


class prefixes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-peer-group - based on the path /bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Prefix counters for the BGP session
  """
  __slots__ = ('_path_helper', '_extmethods', '__received','__received_pre_policy','__sent','__installed',)

  _yang_name = 'prefixes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'neighbors', 'neighbor', 'afi-safis', 'afi-safi', 'state', 'prefixes']

  def _get_received(self):
    """
    Getter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    return self.__received
      
  def _set_received(self, v, load=False):
    """
    Setter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received() directly.

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received(self):
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_received_pre_policy(self):
    """
    Getter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    return self.__received_pre_policy
      
  def _set_received_pre_policy(self, v, load=False):
    """
    Setter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_pre_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_pre_policy() directly.

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_pre_policy must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received_pre_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_pre_policy(self):
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_sent(self):
    """
    Getter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    return self.__sent
      
  def _set_sent(self, v, load=False):
    """
    Setter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sent() directly.

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sent(self):
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_installed(self):
    """
    Getter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    return self.__installed
      
  def _set_installed(self, v, load=False):
    """
    Setter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_installed() directly.

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_installed(self):
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

  received = __builtin__.property(_get_received)
  received_pre_policy = __builtin__.property(_get_received_pre_policy)
  sent = __builtin__.property(_get_sent)
  installed = __builtin__.property(_get_installed)


  _pyangbind_elements = OrderedDict([('received', received), ('received_pre_policy', received_pre_policy), ('sent', sent), ('installed', installed), ])


class prefixes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-neighbor - based on the path /bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Prefix counters for the BGP session
  """
  __slots__ = ('_path_helper', '_extmethods', '__received','__received_pre_policy','__sent','__installed',)

  _yang_name = 'prefixes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'neighbors', 'neighbor', 'afi-safis', 'afi-safi', 'state', 'prefixes']

  def _get_received(self):
    """
    Getter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    return self.__received
      
  def _set_received(self, v, load=False):
    """
    Setter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received() directly.

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received(self):
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_received_pre_policy(self):
    """
    Getter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    return self.__received_pre_policy
      
  def _set_received_pre_policy(self, v, load=False):
    """
    Setter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_pre_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_pre_policy() directly.

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_pre_policy must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received_pre_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_pre_policy(self):
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_sent(self):
    """
    Getter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    return self.__sent
      
  def _set_sent(self, v, load=False):
    """
    Setter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sent() directly.

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sent(self):
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_installed(self):
    """
    Getter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    return self.__installed
      
  def _set_installed(self, v, load=False):
    """
    Setter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_installed() directly.

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_installed(self):
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

  received = __builtin__.property(_get_received)
  received_pre_policy = __builtin__.property(_get_received_pre_policy)
  sent = __builtin__.property(_get_sent)
  installed = __builtin__.property(_get_installed)


  _pyangbind_elements = OrderedDict([('received', received), ('received_pre_policy', received_pre_policy), ('sent', sent), ('installed', installed), ])


class prefixes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bgp-global - based on the path /bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Prefix counters for the BGP session
  """
  __slots__ = ('_path_helper', '_extmethods', '__received','__received_pre_policy','__sent','__installed',)

  _yang_name = 'prefixes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bgp', 'neighbors', 'neighbor', 'afi-safis', 'afi-safi', 'state', 'prefixes']

  def _get_received(self):
    """
    Getter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    return self.__received
      
  def _set_received(self, v, load=False):
    """
    Setter method for received, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received() directly.

    YANG Description: The number of prefixes that are received from the
neighbor after applying any policies. This count is the
number of prefixes present in the post-policy Adj-RIB-In
for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received(self):
    self.__received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_received_pre_policy(self):
    """
    Getter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    return self.__received_pre_policy
      
  def _set_received_pre_policy(self, v, load=False):
    """
    Setter method for received_pre_policy, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/received_pre_policy (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_pre_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_pre_policy() directly.

    YANG Description: The number of prefixes that are received from the
neighbor before applying any policies. This count is
the number of prefixes present in the pre-policy
Adj-RIB-In for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_pre_policy must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__received_pre_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_pre_policy(self):
    self.__received_pre_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="received-pre-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_sent(self):
    """
    Getter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    return self.__sent
      
  def _set_sent(self, v, load=False):
    """
    Setter method for sent, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sent() directly.

    YANG Description: The number of prefixes that are advertised to the
neighbor after applying any policies. This count is
the number of prefixes present in the post-policy
Adj-RIB-Out for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sent(self):
    self.__sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)


  def _get_installed(self):
    """
    Getter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    return self.__installed
      
  def _set_installed(self, v, load=False):
    """
    Setter method for installed, mapped from YANG variable /bgp/neighbors/neighbor/afi_safis/afi_safi/state/prefixes/installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_installed() directly.

    YANG Description: The number of prefices received from the neighbor that
are installed in the network instance RIB and actively used
for forwarding.

Routes that are actively used for forwarding are
defined to be those that:
- are selected, after the application of policies, to be
  included in the Adj-RIB-In-Post, AND
- are selected by best path selection and hence installed
  in the Loc-RIB (either as the only route, or as part of
  a multipath set, AND
- are selected, after the application of protocol
  preferences (e.g., administrative distance) as the
  route to be used by the system's RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)""",
        })

    self.__installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_installed(self):
    self.__installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp', defining_module='openconfig-bgp', yang_type='uint32', is_config=False)

  received = __builtin__.property(_get_received)
  received_pre_policy = __builtin__.property(_get_received_pre_policy)
  sent = __builtin__.property(_get_sent)
  installed = __builtin__.property(_get_installed)


  _pyangbind_elements = OrderedDict([('received', received), ('received_pre_policy', received_pre_policy), ('sent', sent), ('installed', installed), ])


