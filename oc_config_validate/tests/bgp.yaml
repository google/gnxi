!TestContext

description: Test the BGP model

labels:
- bgp

tests:

- !TestCase
  name: "Config and check global BGP config"
  class_name: config_state.SetConfigCheckState
  args:
    xpath: "/bgp/global"
    model: bgp.global_
    json_value: {
      "openconfig-bgp:as": "65333",
      "openconfig-bgp:router-id": "10.1.1.1"
    }

- !TestCase
  name: "Config and check BGP peer-group"
  class_name: config_state.SetConfigCheckState
  args:
    xpath: "/bgp/peer-groups/peer-group[peer-group-name=default]"
    model: bgp.peer_groups.peer_group
    json_value: {
      "openconfig-bgp:peer-group-name": "default"
    }

- !TestCase
  name: "Update and check global BGP config"
  class_name: config_state.SetConfigCheckState
  args:
    xpath: "/bgp/global"
    model: bgp.global_
    json_value: {
      "openconfig-bgp:as": 65123,
      "openconfig-bgp:router-id": "192.168.1.1"
    }

- !TestCase
  name: "Config and check a secure BGP Neighbor"
  class_name: config_state.SetConfigCheckState
  args:
    xpath: "/bgp/neighbors/neighbor[neighbor-address=192.168.1.11]"
    model: bgp.neighbors.neighbor
    json_value: {
      "openconfig-bgp:neighbor-address": "192.168.1.11",
      "openconfig-bgp:peer-as": 65123,
      "openconfig-bgp:auth-password": "SuperSecretPassword",
      "openconfig-bgp:peer-group": ""
    }

- !TestCase
  name: "Update BGP Neighbor"
  class_name: config_state.SetConfigCheckState
  args:
    xpath: "/bgp/neighbors/neighbor[neighbor-address=192.168.1.11]"
    model: bgp.neighbors.neighbor
    json_value: {
      "openconfig-bgp:peer-as": 65123
    }

- !TestCase
  name: "Set description for a BGP Neighbor"
  class_name: config_state.SetConfigCheckState
  args:
    xpath: "/bgp/neighbors/neighbor[neighbor-address=192.168.1.11]"
    model: bgp.neighbors.neighbor
    json_value: {
      "openconfig-bgp:description": "Secure BGP peer"
    }

- !TestCase
  name: "Update BGP Neighbor secret"
  class_name: config_state.SetConfigCheckState
  args:
    xpath: "/bgp/neighbors/neighbor[neighbor-address=192.168.1.11]"
    model: bgp.neighbors.neighbor
    json_value: {
      "openconfig-bgp:auth-password": "MegaUltraSecretPassword"
    }

- !TestCase
  name: "Remove BGP Neighbor secret"
  class_name: config_state.SetConfigCheckState
  args:
    xpath: "/bgp/neighbors/neighbor[neighbor-address=192.168.1.11]"
    model: bgp.neighbors.neighbor
    json_value: {
      "openconfig-bgp:auth-password": ""
    }

- !TestCase
  name: "Config and check an insecure BGP Neighbor"
  class_name: config_state.SetConfigCheckState
  args:
    xpath: "/bgp/neighbors/neighbor[neighbor-address=192.168.1.22]"
    model: bgp.neighbors.neighbor
    json_value: {
      "openconfig-bgp:neighbor-address": "192.168.1.22",
      "openconfig-bgp:peer-as": 65123,
      "openconfig-bgp:peer-group": ""
    }

- !TestCase
  name: "Check all BGP Neighbors"
  class_name: get.GetJsonCheckCompare
  args:
    xpath: "/bgp/neighbors"
    model: bgp.neighbors.neighbors
    json_value: {
      "openconfig-bgp:neighbor": {}
    }

- !TestCase
  name: "Delete and check an insecure BGP Neighbor"
  class_name: config_state.DeleteConfigCheckState
  args:
    xpath: "/bgp/neighbors/neighbor[neighbor-address=192.168.1.22]"

- !TestCase
  name: "Delete and check a secure BGP Neighbor"
  class_name: config_state.DeleteConfigCheckState
  args:
    xpath: "/bgp/neighbors/neighbor[neighbor-address=192.168.1.11]"

- !TestCase
  name: "Delete global BGP config"
  class_name: config_state.DeleteConfigCheckState
  args:
    xpath: "/bgp/global"
