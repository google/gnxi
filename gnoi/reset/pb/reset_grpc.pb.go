// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FactoryResetClient is the client API for FactoryReset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactoryResetClient interface {
	// The Start RPC allows the Client to instruct the Target to immediately
	// clean all existing state and boot the Target in the same condition as it is
	// shipped from factory. State includes storage, configuration, logs,
	// certificates and licenses.
	//
	// Optionally allows rolling back the OS to the same version shipped from
	// factory.
	//
	// Optionally allows for the Target to zero-fill permanent storage where state
	// data is stored.
	//
	// If any of the optional flags is set but not supported, a gRPC Status with
	// code INVALID_ARGUMENT must be returned with the details value set to a
	// properly populated ResetError message.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
}

type factoryResetClient struct {
	cc grpc.ClientConnInterface
}

func NewFactoryResetClient(cc grpc.ClientConnInterface) FactoryResetClient {
	return &factoryResetClient{cc}
}

func (c *factoryResetClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/pb.FactoryReset/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FactoryResetServer is the server API for FactoryReset service.
// All implementations must embed UnimplementedFactoryResetServer
// for forward compatibility
type FactoryResetServer interface {
	// The Start RPC allows the Client to instruct the Target to immediately
	// clean all existing state and boot the Target in the same condition as it is
	// shipped from factory. State includes storage, configuration, logs,
	// certificates and licenses.
	//
	// Optionally allows rolling back the OS to the same version shipped from
	// factory.
	//
	// Optionally allows for the Target to zero-fill permanent storage where state
	// data is stored.
	//
	// If any of the optional flags is set but not supported, a gRPC Status with
	// code INVALID_ARGUMENT must be returned with the details value set to a
	// properly populated ResetError message.
	Start(context.Context, *StartRequest) (*StartResponse, error)
	mustEmbedUnimplementedFactoryResetServer()
}

// UnimplementedFactoryResetServer must be embedded to have forward compatible implementations.
type UnimplementedFactoryResetServer struct {
}

func (*UnimplementedFactoryResetServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedFactoryResetServer) mustEmbedUnimplementedFactoryResetServer() {}

func RegisterFactoryResetServer(s *grpc.Server, srv FactoryResetServer) {
	s.RegisterService(&_FactoryReset_serviceDesc, srv)
}

func _FactoryReset_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactoryResetServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FactoryReset/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactoryResetServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FactoryReset_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FactoryReset",
	HandlerType: (*FactoryResetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _FactoryReset_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reset.proto",
}
